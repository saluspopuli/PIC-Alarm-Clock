

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Jun 15 14:45:53 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  000E                     	;# 
    55  000E                     	;# 
    56  000F                     	;# 
    57  0010                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0013                     	;# 
    61  0014                     	;# 
    62  0015                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0017                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001B                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  001D                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  0087                     	;# 
    79  0088                     	;# 
    80  0089                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  010F                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000E                     	;# 
   116  000F                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0015                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  0087                     	;# 
   139  0088                     	;# 
   140  0089                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0088                     	;# 
   200  0089                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280                           
   281                           	psect	idataBANK0
   282  04E0                     __pidataBANK0:	
   283                           
   284                           ;initializer for _segNum
   285  04E0  343F               	retlw	63
   286  04E1  3406               	retlw	6
   287  04E2  345B               	retlw	91
   288  04E3  344F               	retlw	79
   289  04E4  3466               	retlw	102
   290  04E5  346D               	retlw	109
   291  04E6  347D               	retlw	125
   292  04E7  3407               	retlw	7
   293  04E8  347F               	retlw	127
   294  04E9  346F               	retlw	111
   295  0008                     _PORTD	set	8
   296  001A                     _RCREG	set	26
   297  0019                     _TXREG	set	25
   298  00C4                     _CREN	set	196
   299  005F                     _GIE	set	95
   300  005C                     _INTE	set	92
   301  0059                     _INTF	set	89
   302  0034                     _RB4	set	52
   303  0035                     _RB5	set	53
   304  0036                     _RB6	set	54
   305  0037                     _RB7	set	55
   306  0038                     _RC0	set	56
   307  0039                     _RC1	set	57
   308  003A                     _RC2	set	58
   309  0065                     _RCIF	set	101
   310  00C6                     _RX9	set	198
   311  00C7                     _SPEN	set	199
   312  0099                     _SPBRG	set	153
   313  0088                     _TRISD	set	136
   314  04C2                     _BRGH	set	1218
   315  04C4                     _SYNC	set	1220
   316  0430                     _TRISB0	set	1072
   317  0434                     _TRISB4	set	1076
   318  0435                     _TRISB5	set	1077
   319  0436                     _TRISB6	set	1078
   320  0437                     _TRISB7	set	1079
   321  0438                     _TRISC0	set	1080
   322  0439                     _TRISC1	set	1081
   323  043A                     _TRISC2	set	1082
   324  04C1                     _TRMT	set	1217
   325  04C6                     _TX9	set	1222
   326  04C5                     _TXEN	set	1221
   327                           
   328                           ; #config settings
   329  0000                     
   330                           	psect	cinit
   331  0015                     start_initialization:	
   332  0015                     __initialization:	
   333                           
   334                           ; Clear objects allocated to COMMON
   335  0015  01F9               	clrf	__pbssCOMMON& (0+127)
   336                           
   337                           ; Clear objects allocated to BANK0
   338  0016  01CA               	clrf	__pbssBANK0& (0+127)
   339  0017  01CB               	clrf	(__pbssBANK0+1)& (0+127)
   340                           
   341                           ; Initialize objects allocated to BANK0
   342  0018  1383               	bcf	3,7	;select IRP bank0
   343  0019  304A               	movlw	low (__pdataBANK0+10)
   344  001A  00FD               	movwf	btemp+-1
   345  001B  3004               	movlw	high __pidataBANK0
   346  001C  00FE               	movwf	btemp
   347  001D  30E0               	movlw	low __pidataBANK0
   348  001E  00FF               	movwf	btemp+1
   349  001F  3040               	movlw	low __pdataBANK0
   350  0020  0084               	movwf	4
   351  0021  120A  118A  24B3   	fcall	init_ram0
   352  0024                     end_of_initialization:	
   353                           ;End of C runtime variable initialization code
   354                           
   355  0024                     __end_of__initialization:	
   356  0024  0183               	clrf	3
   357  0025  120A  118A  2C32   	ljmp	_main	;jump to C main() function
   358                           
   359                           	psect	bssCOMMON
   360  0079                     __pbssCOMMON:	
   361  0079                     _RTC_WRITE_PROTECT:	
   362  0079                     	ds	1
   363                           
   364                           	psect	bssBANK0
   365  004A                     __pbssBANK0:	
   366  004A                     _phase:	
   367  004A                     	ds	2
   368                           
   369                           	psect	dataBANK0
   370  0040                     __pdataBANK0:	
   371  0040                     _segNum:	
   372  0040                     	ds	10
   373                           
   374                           	psect	inittext
   375  04AF                     init_fetch0:	
   376                           ;	Called with low address in FSR and high address in W
   377                           
   378  04AF  087E               	movf	126,w
   379  04B0  008A               	movwf	10
   380  04B1  087F               	movf	127,w
   381  04B2  0082               	movwf	2
   382  04B3                     init_ram0:	
   383                           ;Called with:
   384                           ;	high address of idata address in btemp 
   385                           ;	low address of idata address in btemp+1 
   386                           ;	low address of data in FSR
   387                           ;	high address + 1 of data in btemp-1
   388                           
   389  04B3  24AF  120A  118A   	fcall	init_fetch0
   390  04B6  0080               	movwf	0
   391  04B7  0A84               	incf	4,f
   392  04B8  0804               	movf	4,w
   393  04B9  067D               	xorwf	125,w
   394  04BA  1903               	btfsc	3,2
   395  04BB  3400               	retlw	0
   396  04BC  0AFF               	incf	127,f
   397  04BD  1903               	btfsc	3,2
   398  04BE  0AFE               	incf	126,f
   399  04BF  2CB3               	goto	init_ram0
   400                           
   401                           	psect	cstackCOMMON
   402  0070                     __pcstackCOMMON:	
   403  0070                     ?_SEG7_init:	
   404  0070                     ?_RTC_init:	
   405                           ; 0 bytes @ 0x0
   406                           
   407  0070                     ?_RTC_set_year:	
   408                           ; 0 bytes @ 0x0
   409                           
   410  0070                     ?_RTC_write_protect:	
   411                           ; 0 bytes @ 0x0
   412                           
   413  0070                     ?_RTC_write:	
   414                           ; 0 bytes @ 0x0
   415                           
   416  0070                     ?_ISR:	
   417                           ; 0 bytes @ 0x0
   418                           
   419  0070                     ??_ISR:	
   420                           ; 0 bytes @ 0x0
   421                           
   422  0070                     ?_main:	
   423                           ; 0 bytes @ 0x0
   424                           
   425  0070                     ?_RTC_get_minutes:	
   426                           ; 0 bytes @ 0x0
   427                           
   428  0070                     ?_RTC_get_hours:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_RTC_get_month:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_RTC_get_date:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_RTC_get_year:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_RTC_read:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_BCD_to_decimal:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_decimal_to_BCD:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_RTC_read_register:	
   450                           ; 1 bytes @ 0x0
   451                           
   452                           
   453                           ; 1 bytes @ 0x0
   454  0070                     	ds	4
   455  0074                     ??_SEG7_init:	
   456  0074                     ??_RTC_write:	
   457                           ; 0 bytes @ 0x4
   458                           
   459  0074                     ??_RTC_read:	
   460                           ; 0 bytes @ 0x4
   461                           
   462  0074                     ?_SEG7_write_digit:	
   463                           ; 0 bytes @ 0x4
   464                           
   465  0074                     ?___bmul:	
   466                           ; 0 bytes @ 0x4
   467                           
   468  0074                     ?___wmul:	
   469                           ; 1 bytes @ 0x4
   470                           
   471  0074                     ?___awdiv:	
   472                           ; 2 bytes @ 0x4
   473                           
   474  0074                     ?___awmod:	
   475                           ; 2 bytes @ 0x4
   476                           
   477  0074                     ?___lwmod:	
   478                           ; 2 bytes @ 0x4
   479                           
   480  0074                     SEG7_write_digit@value:	
   481                           ; 2 bytes @ 0x4
   482                           
   483  0074                     ___bmul@multiplicand:	
   484                           ; 1 bytes @ 0x4
   485                           
   486  0074                     ___wmul@multiplier:	
   487                           ; 1 bytes @ 0x4
   488                           
   489  0074                     ___awdiv@divisor:	
   490                           ; 2 bytes @ 0x4
   491                           
   492  0074                     ___awmod@divisor:	
   493                           ; 2 bytes @ 0x4
   494                           
   495  0074                     ___lwmod@divisor:	
   496                           ; 2 bytes @ 0x4
   497                           
   498                           
   499                           ; 2 bytes @ 0x4
   500  0074                     	ds	1
   501  0075                     ??___bmul:	
   502  0075                     RTC_write@data:	
   503                           ; 0 bytes @ 0x5
   504                           
   505  0075                     SEG7_write_digit@decimal_point:	
   506                           ; 1 bytes @ 0x5
   507                           
   508                           
   509                           ; 1 bytes @ 0x5
   510  0075                     	ds	1
   511  0076                     ??_SEG7_write_digit:	
   512  0076                     ___bmul@product:	
   513                           ; 0 bytes @ 0x6
   514                           
   515  0076                     RTC_write@i:	
   516                           ; 1 bytes @ 0x6
   517                           
   518  0076                     RTC_read@i:	
   519                           ; 2 bytes @ 0x6
   520                           
   521  0076                     ___wmul@multiplicand:	
   522                           ; 2 bytes @ 0x6
   523                           
   524  0076                     ___awdiv@dividend:	
   525                           ; 2 bytes @ 0x6
   526                           
   527  0076                     ___awmod@dividend:	
   528                           ; 2 bytes @ 0x6
   529                           
   530  0076                     ___lwmod@dividend:	
   531                           ; 2 bytes @ 0x6
   532                           
   533                           
   534                           ; 2 bytes @ 0x6
   535  0076                     	ds	1
   536  0077                     SEG7_write_digit@digit:	
   537  0077                     ___bmul@multiplier:	
   538                           ; 1 bytes @ 0x7
   539                           
   540                           
   541                           ; 1 bytes @ 0x7
   542  0077                     	ds	1
   543  0078                     ??___wmul:	
   544  0078                     ??___awdiv:	
   545                           ; 0 bytes @ 0x8
   546                           
   547  0078                     ??___awmod:	
   548                           ; 0 bytes @ 0x8
   549                           
   550  0078                     ??___lwmod:	
   551                           ; 0 bytes @ 0x8
   552                           
   553  0078                     RTC_read@data:	
   554                           ; 0 bytes @ 0x8
   555                           
   556                           
   557                           ; 1 bytes @ 0x8
   558  0078                     	ds	1
   559  0079                     ??_RTC_init:	
   560  0079                     ??_RTC_get_minutes:	
   561                           ; 0 bytes @ 0x9
   562                           
   563  0079                     ??_RTC_get_month:	
   564                           ; 0 bytes @ 0x9
   565                           
   566  0079                     ??_RTC_get_date:	
   567                           ; 0 bytes @ 0x9
   568                           
   569  0079                     ??_RTC_get_year:	
   570                           ; 0 bytes @ 0x9
   571                           
   572  0079                     ??_RTC_write_register:	
   573                           ; 0 bytes @ 0x9
   574                           
   575  0079                     ??_main:	
   576                           ; 0 bytes @ 0x9
   577                           
   578                           
   579                           	psect	cstackBANK0
   580  0020                     __pcstackBANK0:	
   581                           ; 0 bytes @ 0x9
   582                           
   583  0020                     ??_BCD_to_decimal:	
   584  0020                     ??_RTC_read_register:	
   585                           ; 0 bytes @ 0x0
   586                           
   587  0020                     ___awdiv@counter:	
   588                           ; 0 bytes @ 0x0
   589                           
   590  0020                     ___awmod@counter:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0020                     ___lwmod@counter:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0020                     ___wmul@product:	
   597                           ; 1 bytes @ 0x0
   598                           
   599                           
   600                           ; 2 bytes @ 0x0
   601  0020                     	ds	1
   602  0021                     ?___lwdiv:	
   603  0021                     RTC_read_register@address:	
   604                           ; 2 bytes @ 0x1
   605                           
   606  0021                     ___awdiv@sign:	
   607                           ; 1 bytes @ 0x1
   608                           
   609  0021                     ___awmod@sign:	
   610                           ; 1 bytes @ 0x1
   611                           
   612  0021                     ___lwdiv@divisor:	
   613                           ; 1 bytes @ 0x1
   614                           
   615                           
   616                           ; 2 bytes @ 0x1
   617  0021                     	ds	1
   618  0022                     RTC_read_register@data:	
   619  0022                     BCD_to_decimal@tens:	
   620                           ; 1 bytes @ 0x2
   621                           
   622  0022                     ___awdiv@quotient:	
   623                           ; 1 bytes @ 0x2
   624                           
   625                           
   626                           ; 2 bytes @ 0x2
   627  0022                     	ds	1
   628  0023                     BCD_to_decimal@ones:	
   629  0023                     ___lwdiv@dividend:	
   630                           ; 1 bytes @ 0x3
   631                           
   632                           
   633                           ; 2 bytes @ 0x3
   634  0023                     	ds	1
   635  0024                     ??_decimal_to_BCD:	
   636  0024                     BCD_to_decimal@decimal:	
   637                           ; 0 bytes @ 0x4
   638                           
   639                           
   640                           ; 1 bytes @ 0x4
   641  0024                     	ds	1
   642  0025                     ??___lwdiv:	
   643  0025                     BCD_to_decimal@bcd:	
   644                           ; 0 bytes @ 0x5
   645                           
   646                           
   647                           ; 1 bytes @ 0x5
   648  0025                     	ds	1
   649  0026                     ??_RTC_get_hours:	
   650  0026                     ___lwdiv@quotient:	
   651                           ; 0 bytes @ 0x6
   652                           
   653                           
   654                           ; 2 bytes @ 0x6
   655  0026                     	ds	1
   656  0027                     RTC_get_hours@tmp:	
   657  0027                     decimal_to_BCD@tens:	
   658                           ; 1 bytes @ 0x7
   659                           
   660                           
   661                           ; 1 bytes @ 0x7
   662  0027                     	ds	1
   663  0028                     RTC_get_hours@hours:	
   664  0028                     decimal_to_BCD@ones:	
   665                           ; 1 bytes @ 0x8
   666                           
   667  0028                     ___lwdiv@counter:	
   668                           ; 1 bytes @ 0x8
   669                           
   670                           
   671                           ; 1 bytes @ 0x8
   672  0028                     	ds	1
   673  0029                     ?_SEG7_write_all:	
   674  0029                     decimal_to_BCD@bcd:	
   675                           ; 0 bytes @ 0x9
   676                           
   677  0029                     SEG7_write_all@value:	
   678                           ; 1 bytes @ 0x9
   679                           
   680                           
   681                           ; 2 bytes @ 0x9
   682  0029                     	ds	1
   683  002A                     decimal_to_BCD@decimal:	
   684                           
   685                           ; 1 bytes @ 0xA
   686  002A                     	ds	1
   687  002B                     ?_RTC_write_register:	
   688  002B                     RTC_write_register@data:	
   689                           ; 0 bytes @ 0xB
   690                           
   691  002B                     SEG7_write_all@decimal_point:	
   692                           ; 1 bytes @ 0xB
   693                           
   694                           
   695                           ; 1 bytes @ 0xB
   696  002B                     	ds	1
   697  002C                     ??_SEG7_write_all:	
   698  002C                     RTC_write_register@address:	
   699                           ; 0 bytes @ 0xC
   700                           
   701                           
   702                           ; 1 bytes @ 0xC
   703  002C                     	ds	1
   704  002D                     ??_RTC_set_year:	
   705  002D                     ??_RTC_write_protect:	
   706                           ; 0 bytes @ 0xD
   707                           
   708                           
   709                           ; 0 bytes @ 0xD
   710  002D                     	ds	1
   711  002E                     RTC_set_year@year:	
   712  002E                     SEG7_write_all@digit1:	
   713                           ; 1 bytes @ 0xE
   714                           
   715                           
   716                           ; 1 bytes @ 0xE
   717  002E                     	ds	1
   718  002F                     RTC_write_protect@state:	
   719  002F                     SEG7_write_all@digit2:	
   720                           ; 1 bytes @ 0xF
   721                           
   722                           
   723                           ; 1 bytes @ 0xF
   724  002F                     	ds	1
   725  0030                     SEG7_write_all@digit3:	
   726                           
   727                           ; 1 bytes @ 0x10
   728  0030                     	ds	1
   729  0031                     SEG7_write_all@digit4:	
   730                           
   731                           ; 1 bytes @ 0x11
   732  0031                     	ds	1
   733  0032                     SEG7_write_all@dp1:	
   734                           
   735                           ; 1 bytes @ 0x12
   736  0032                     	ds	1
   737  0033                     SEG7_write_all@dp2:	
   738                           
   739                           ; 1 bytes @ 0x13
   740  0033                     	ds	1
   741  0034                     SEG7_write_all@dp3:	
   742                           
   743                           ; 1 bytes @ 0x14
   744  0034                     	ds	1
   745  0035                     SEG7_write_all@dp4:	
   746                           
   747                           ; 1 bytes @ 0x15
   748  0035                     	ds	1
   749  0036                     ?_displayOnSegment:	
   750  0036                     displayOnSegment@phase:	
   751                           ; 0 bytes @ 0x16
   752                           
   753                           
   754                           ; 2 bytes @ 0x16
   755  0036                     	ds	2
   756  0038                     ??_displayOnSegment:	
   757                           
   758                           ; 0 bytes @ 0x18
   759  0038                     	ds	3
   760  003B                     displayOnSegment@minutes:	
   761                           
   762                           ; 1 bytes @ 0x1B
   763  003B                     	ds	1
   764  003C                     displayOnSegment@hours:	
   765                           
   766                           ; 1 bytes @ 0x1C
   767  003C                     	ds	1
   768  003D                     displayOnSegment@month:	
   769                           
   770                           ; 1 bytes @ 0x1D
   771  003D                     	ds	1
   772  003E                     displayOnSegment@day:	
   773                           
   774                           ; 1 bytes @ 0x1E
   775  003E                     	ds	1
   776  003F                     displayOnSegment@year:	
   777                           
   778                           ; 1 bytes @ 0x1F
   779  003F                     	ds	1
   780                           
   781                           	psect	maintext
   782  0432                     __pmaintext:	
   783 ;;
   784 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   785 ;;
   786 ;; *************** function _main *****************
   787 ;; Defined at:
   788 ;;		line 44 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\main.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;		None               void
   795 ;; Registers used:
   796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 17F/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   802 ;;      Params:         0       0       0       0       0
   803 ;;      Locals:         0       0       0       0       0
   804 ;;      Temps:          0       0       0       0       0
   805 ;;      Totals:         0       0       0       0       0
   806 ;;Total ram usage:        0 bytes
   807 ;; Hardware stack levels required when called:    5
   808 ;; This function calls:
   809 ;;		_RTC_init
   810 ;;		_RTC_set_year
   811 ;;		_SEG7_init
   812 ;;		_displayOnSegment
   813 ;; This function is called by:
   814 ;;		Startup code after reset
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818                           
   819                           ;psect for function _main
   820  0432                     _main:	
   821                           
   822                           ;main.c: 46: SEG7_init();
   823                           
   824                           ;incstack = 0
   825                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   826  0432  120A  118A  2512  120A  118A  	fcall	_SEG7_init
   827                           
   828                           ;main.c: 47: RTC_init();
   829  0437  120A  118A  24D1  120A  118A  	fcall	_RTC_init
   830                           
   831                           ;main.c: 49: TRISB0 = 1;
   832  043C  1683               	bsf	3,5	;RP0=1, select bank1
   833  043D  1303               	bcf	3,6	;RP1=0, select bank1
   834  043E  1406               	bsf	6,0	;volatile
   835                           
   836                           ;main.c: 50: INTE = 1;
   837  043F  160B               	bsf	11,4	;volatile
   838                           
   839                           ;main.c: 51: GIE = 1;
   840  0440  178B               	bsf	11,7	;volatile
   841                           
   842                           ;main.c: 53: RTC_set_year(24);
   843  0441  3018               	movlw	24
   844  0442  120A  118A  249C  120A  118A  	fcall	_RTC_set_year
   845  0447                     l1735:	
   846                           ;main.c: 55: while (1){
   847                           
   848                           
   849                           ;main.c: 57: displayOnSegment(phase);
   850  0447  1283               	bcf	3,5	;RP0=0, select bank0
   851  0448  1303               	bcf	3,6	;RP1=0, select bank0
   852  0449  084B               	movf	_phase+1,w
   853  044A  01B7               	clrf	displayOnSegment@phase+1
   854  044B  07B7               	addwf	displayOnSegment@phase+1,f
   855  044C  084A               	movf	_phase,w
   856  044D  01B6               	clrf	displayOnSegment@phase
   857  044E  07B6               	addwf	displayOnSegment@phase,f
   858  044F  120A  118A  2104  120A  118A  	fcall	_displayOnSegment
   859  0454  2C47               	goto	l1735
   860  0455                     __end_of_main:	
   861                           
   862                           	psect	text1
   863  0104                     __ptext1:	
   864 ;; *************** function _displayOnSegment *****************
   865 ;; Defined at:
   866 ;;		line 63 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\main.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;  phase           2   22[BANK0 ] int 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  year            1   31[BANK0 ] unsigned char 
   871 ;;  day             1   30[BANK0 ] unsigned char 
   872 ;;  month           1   29[BANK0 ] unsigned char 
   873 ;;  hours           1   28[BANK0 ] unsigned char 
   874 ;;  minutes         1   27[BANK0 ] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;		None               void
   877 ;; Registers used:
   878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   884 ;;      Params:         0       2       0       0       0
   885 ;;      Locals:         0       5       0       0       0
   886 ;;      Temps:          0       3       0       0       0
   887 ;;      Totals:         0      10       0       0       0
   888 ;;Total ram usage:       10 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; Hardware stack levels required when called:    4
   891 ;; This function calls:
   892 ;;		_RTC_get_date
   893 ;;		_RTC_get_hours
   894 ;;		_RTC_get_minutes
   895 ;;		_RTC_get_month
   896 ;;		_RTC_get_year
   897 ;;		_SEG7_write_all
   898 ;;		___wmul
   899 ;; This function is called by:
   900 ;;		_main
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           
   905                           ;psect for function _displayOnSegment
   906  0104                     _displayOnSegment:	
   907                           
   908                           ;main.c: 64: if (phase == 0){
   909                           
   910                           ;incstack = 0
   911                           ; Regs used in _displayOnSegment: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   912  0104  1283               	bcf	3,5	;RP0=0, select bank0
   913  0105  1303               	bcf	3,6	;RP1=0, select bank0
   914  0106  0837               	movf	displayOnSegment@phase+1,w
   915  0107  0436               	iorwf	displayOnSegment@phase,w
   916  0108  1D03               	skipz
   917  0109  2940               	goto	l1713
   918                           
   919                           ;main.c: 65: uint8_t minutes = RTC_get_minutes();
   920  010A  120A  118A  24FE  120A  118A  	fcall	_RTC_get_minutes
   921  010F  1283               	bcf	3,5	;RP0=0, select bank0
   922  0110  1303               	bcf	3,6	;RP1=0, select bank0
   923  0111  00B8               	movwf	??_displayOnSegment
   924  0112  0838               	movf	??_displayOnSegment,w
   925  0113  00BB               	movwf	displayOnSegment@minutes
   926                           
   927                           ;main.c: 66: uint8_t hours = RTC_get_hours();
   928  0114  120A  118A  2392  120A  118A  	fcall	_RTC_get_hours
   929  0119  1283               	bcf	3,5	;RP0=0, select bank0
   930  011A  1303               	bcf	3,6	;RP1=0, select bank0
   931  011B  00B8               	movwf	??_displayOnSegment
   932  011C  0838               	movf	??_displayOnSegment,w
   933  011D  00BC               	movwf	displayOnSegment@hours
   934                           
   935                           ;main.c: 68: SEG7_write_all((hours*100) + minutes, 4);
   936  011E  083C               	movf	displayOnSegment@hours,w
   937  011F  00B8               	movwf	??_displayOnSegment
   938  0120  01B9               	clrf	??_displayOnSegment+1
   939  0121  0838               	movf	??_displayOnSegment,w
   940  0122  00F4               	movwf	___wmul@multiplier
   941  0123  0839               	movf	??_displayOnSegment+1,w
   942  0124  00F5               	movwf	___wmul@multiplier+1
   943  0125  3064               	movlw	100
   944  0126  00F6               	movwf	___wmul@multiplicand
   945  0127  3000               	movlw	0
   946  0128  00F7               	movwf	___wmul@multiplicand+1
   947  0129  120A  118A  23BD  120A  118A  	fcall	___wmul
   948  012E  1283               	bcf	3,5	;RP0=0, select bank0
   949  012F  1303               	bcf	3,6	;RP1=0, select bank0
   950  0130  083B               	movf	displayOnSegment@minutes,w
   951  0131  0774               	addwf	?___wmul,w
   952  0132  00A9               	movwf	SEG7_write_all@value
   953  0133  3000               	movlw	0
   954  0134  1803               	skipnc
   955  0135  3001               	movlw	1
   956  0136  0775               	addwf	?___wmul+1,w
   957  0137  00AA               	movwf	SEG7_write_all@value+1
   958  0138  3004               	movlw	4
   959  0139  00BA               	movwf	??_displayOnSegment+2
   960  013A  083A               	movf	??_displayOnSegment+2,w
   961  013B  00AB               	movwf	SEG7_write_all@decimal_point
   962  013C  120A  118A  2028   	fcall	_SEG7_write_all
   963                           
   964                           ;main.c: 69: } else if (phase == 1){
   965  013F  0008               	return
   966  0140                     l1713:	
   967  0140  3001               	movlw	1
   968  0141  1283               	bcf	3,5	;RP0=0, select bank0
   969  0142  1303               	bcf	3,6	;RP1=0, select bank0
   970  0143  0636               	xorwf	displayOnSegment@phase,w
   971  0144  0437               	iorwf	displayOnSegment@phase+1,w
   972  0145  1D03               	skipz
   973  0146  297D               	goto	l1719
   974                           
   975                           ;main.c: 70: uint8_t month = RTC_get_month();
   976  0147  120A  118A  24F4  120A  118A  	fcall	_RTC_get_month
   977  014C  1283               	bcf	3,5	;RP0=0, select bank0
   978  014D  1303               	bcf	3,6	;RP1=0, select bank0
   979  014E  00B8               	movwf	??_displayOnSegment
   980  014F  0838               	movf	??_displayOnSegment,w
   981  0150  00BD               	movwf	displayOnSegment@month
   982                           
   983                           ;main.c: 71: uint8_t day = RTC_get_date();
   984  0151  120A  118A  2508  120A  118A  	fcall	_RTC_get_date
   985  0156  1283               	bcf	3,5	;RP0=0, select bank0
   986  0157  1303               	bcf	3,6	;RP1=0, select bank0
   987  0158  00B8               	movwf	??_displayOnSegment
   988  0159  0838               	movf	??_displayOnSegment,w
   989  015A  00BE               	movwf	displayOnSegment@day
   990                           
   991                           ;main.c: 73: SEG7_write_all((month*100) + day, 4);
   992  015B  083D               	movf	displayOnSegment@month,w
   993  015C  00B8               	movwf	??_displayOnSegment
   994  015D  01B9               	clrf	??_displayOnSegment+1
   995  015E  0838               	movf	??_displayOnSegment,w
   996  015F  00F4               	movwf	___wmul@multiplier
   997  0160  0839               	movf	??_displayOnSegment+1,w
   998  0161  00F5               	movwf	___wmul@multiplier+1
   999  0162  3064               	movlw	100
  1000  0163  00F6               	movwf	___wmul@multiplicand
  1001  0164  3000               	movlw	0
  1002  0165  00F7               	movwf	___wmul@multiplicand+1
  1003  0166  120A  118A  23BD  120A  118A  	fcall	___wmul
  1004  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1005  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1006  016D  083E               	movf	displayOnSegment@day,w
  1007  016E  0774               	addwf	?___wmul,w
  1008  016F  00A9               	movwf	SEG7_write_all@value
  1009  0170  3000               	movlw	0
  1010  0171  1803               	skipnc
  1011  0172  3001               	movlw	1
  1012  0173  0775               	addwf	?___wmul+1,w
  1013  0174  00AA               	movwf	SEG7_write_all@value+1
  1014  0175  3004               	movlw	4
  1015  0176  00BA               	movwf	??_displayOnSegment+2
  1016  0177  083A               	movf	??_displayOnSegment+2,w
  1017  0178  00AB               	movwf	SEG7_write_all@decimal_point
  1018  0179  120A  118A  2028   	fcall	_SEG7_write_all
  1019                           
  1020                           ;main.c: 75: } else {
  1021  017C  0008               	return
  1022  017D                     l1719:	
  1023                           
  1024                           ;main.c: 76: uint8_t year = RTC_get_year();
  1025  017D  120A  118A  24EA  120A  118A  	fcall	_RTC_get_year
  1026  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1027  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1028  0184  00B8               	movwf	??_displayOnSegment
  1029  0185  0838               	movf	??_displayOnSegment,w
  1030  0186  00BF               	movwf	displayOnSegment@year
  1031                           
  1032                           ;main.c: 78: SEG7_write_all(2000 + year, 0);
  1033  0187  083F               	movf	displayOnSegment@year,w
  1034  0188  3ED0               	addlw	208
  1035  0189  00A9               	movwf	SEG7_write_all@value
  1036  018A  3007               	movlw	7
  1037  018B  1803               	skipnc
  1038  018C  3008               	movlw	8
  1039  018D  00AA               	movwf	SEG7_write_all@value+1
  1040  018E  01AB               	clrf	SEG7_write_all@decimal_point
  1041  018F  120A  118A  2028   	fcall	_SEG7_write_all
  1042  0192  0008               	return
  1043  0193                     __end_of_displayOnSegment:	
  1044                           
  1045                           	psect	text2
  1046  03BD                     __ptext2:	
  1047 ;; *************** function ___wmul *****************
  1048 ;; Defined at:
  1049 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;  multiplier      2    4[COMMON] unsigned int 
  1052 ;;  multiplicand    2    6[COMMON] unsigned int 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  product         2    0[BANK0 ] unsigned int 
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  2    4[COMMON] unsigned int 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2, status,0
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1064 ;;      Params:         4       0       0       0       0
  1065 ;;      Locals:         0       2       0       0       0
  1066 ;;      Temps:          0       0       0       0       0
  1067 ;;      Totals:         4       2       0       0       0
  1068 ;;Total ram usage:        6 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    1
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_displayOnSegment
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           
  1079                           ;psect for function ___wmul
  1080  03BD                     ___wmul:	
  1081                           
  1082                           ;incstack = 0
  1083                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1084  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  1085  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  1086  03BF  01A0               	clrf	___wmul@product
  1087  03C0  01A1               	clrf	___wmul@product+1
  1088  03C1                     l1691:	
  1089  03C1  1C74               	btfss	___wmul@multiplier,0
  1090  03C2  2BCB               	goto	l342
  1091  03C3  0876               	movf	___wmul@multiplicand,w
  1092  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  1093  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  1094  03C6  07A0               	addwf	___wmul@product,f
  1095  03C7  1803               	skipnc
  1096  03C8  0AA1               	incf	___wmul@product+1,f
  1097  03C9  0877               	movf	___wmul@multiplicand+1,w
  1098  03CA  07A1               	addwf	___wmul@product+1,f
  1099  03CB                     l342:	
  1100  03CB  3001               	movlw	1
  1101  03CC                     u1375:	
  1102  03CC  1003               	clrc
  1103  03CD  0DF6               	rlf	___wmul@multiplicand,f
  1104  03CE  0DF7               	rlf	___wmul@multiplicand+1,f
  1105  03CF  3EFF               	addlw	-1
  1106  03D0  1D03               	skipz
  1107  03D1  2BCC               	goto	u1375
  1108  03D2  3001               	movlw	1
  1109  03D3                     u1385:	
  1110  03D3  1003               	clrc
  1111  03D4  0CF5               	rrf	___wmul@multiplier+1,f
  1112  03D5  0CF4               	rrf	___wmul@multiplier,f
  1113  03D6  3EFF               	addlw	-1
  1114  03D7  1D03               	skipz
  1115  03D8  2BD3               	goto	u1385
  1116  03D9  0875               	movf	___wmul@multiplier+1,w
  1117  03DA  0474               	iorwf	___wmul@multiplier,w
  1118  03DB  1D03               	skipz
  1119  03DC  2BC1               	goto	l1691
  1120  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  1121  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  1122  03DF  0821               	movf	___wmul@product+1,w
  1123  03E0  01F5               	clrf	?___wmul+1
  1124  03E1  07F5               	addwf	?___wmul+1,f
  1125  03E2  0820               	movf	___wmul@product,w
  1126  03E3  01F4               	clrf	?___wmul
  1127  03E4  07F4               	addwf	?___wmul,f
  1128  03E5  0008               	return
  1129  03E6                     __end_of___wmul:	
  1130                           
  1131                           	psect	text3
  1132  0028                     __ptext3:	
  1133 ;; *************** function _SEG7_write_all *****************
  1134 ;; Defined at:
  1135 ;;		line 11 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\SEG7_4DIG.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;  value           2    9[BANK0 ] unsigned int 
  1138 ;;  decimal_poin    1   11[BANK0 ] unsigned char 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  dp4             1   21[BANK0 ] unsigned char 
  1141 ;;  dp3             1   20[BANK0 ] unsigned char 
  1142 ;;  dp2             1   19[BANK0 ] unsigned char 
  1143 ;;  dp1             1   18[BANK0 ] unsigned char 
  1144 ;;  digit4          1   17[BANK0 ] unsigned char 
  1145 ;;  digit3          1   16[BANK0 ] unsigned char 
  1146 ;;  digit2          1   15[BANK0 ] unsigned char 
  1147 ;;  digit1          1   14[BANK0 ] unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;		None               void
  1150 ;; Registers used:
  1151 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1157 ;;      Params:         0       3       0       0       0
  1158 ;;      Locals:         0       8       0       0       0
  1159 ;;      Temps:          0       2       0       0       0
  1160 ;;      Totals:         0      13       0       0       0
  1161 ;;Total ram usage:       13 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    2
  1164 ;; This function calls:
  1165 ;;		_SEG7_write_digit
  1166 ;;		___lwdiv
  1167 ;;		___lwmod
  1168 ;; This function is called by:
  1169 ;;		_displayOnSegment
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           
  1174                           ;psect for function _SEG7_write_all
  1175  0028                     _SEG7_write_all:	
  1176                           
  1177                           ;SEG7_4DIG.c: 12: uint8_t digit1 = value / 1000;
  1178                           
  1179                           ;incstack = 0
  1180                           ; Regs used in _SEG7_write_all: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1181  0028  30E8               	movlw	232
  1182  0029  1283               	bcf	3,5	;RP0=0, select bank0
  1183  002A  1303               	bcf	3,6	;RP1=0, select bank0
  1184  002B  00A1               	movwf	___lwdiv@divisor
  1185  002C  3003               	movlw	3
  1186  002D  00A2               	movwf	___lwdiv@divisor+1
  1187  002E  082A               	movf	SEG7_write_all@value+1,w
  1188  002F  01A4               	clrf	___lwdiv@dividend+1
  1189  0030  07A4               	addwf	___lwdiv@dividend+1,f
  1190  0031  0829               	movf	SEG7_write_all@value,w
  1191  0032  01A3               	clrf	___lwdiv@dividend
  1192  0033  07A3               	addwf	___lwdiv@dividend,f
  1193  0034  120A  118A  223F  120A  118A  	fcall	___lwdiv
  1194  0039  1283               	bcf	3,5	;RP0=0, select bank0
  1195  003A  1303               	bcf	3,6	;RP1=0, select bank0
  1196  003B  0821               	movf	?___lwdiv,w
  1197  003C  00AC               	movwf	??_SEG7_write_all
  1198  003D  082C               	movf	??_SEG7_write_all,w
  1199  003E  00AE               	movwf	SEG7_write_all@digit1
  1200                           
  1201                           ;SEG7_4DIG.c: 13: uint8_t digit2 = (value % 1000) / 100;
  1202  003F  3064               	movlw	100
  1203  0040  00A1               	movwf	___lwdiv@divisor
  1204  0041  3000               	movlw	0
  1205  0042  00A2               	movwf	___lwdiv@divisor+1
  1206  0043  082A               	movf	SEG7_write_all@value+1,w
  1207  0044  01F7               	clrf	___lwmod@dividend+1
  1208  0045  07F7               	addwf	___lwmod@dividend+1,f
  1209  0046  0829               	movf	SEG7_write_all@value,w
  1210  0047  01F6               	clrf	___lwmod@dividend
  1211  0048  07F6               	addwf	___lwmod@dividend,f
  1212  0049  30E8               	movlw	232
  1213  004A  00F4               	movwf	___lwmod@divisor
  1214  004B  3003               	movlw	3
  1215  004C  00F5               	movwf	___lwmod@divisor+1
  1216  004D  120A  118A  22FA  120A  118A  	fcall	___lwmod
  1217  0052  0875               	movf	?___lwmod+1,w
  1218  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0055  01A4               	clrf	___lwdiv@dividend+1
  1221  0056  07A4               	addwf	___lwdiv@dividend+1,f
  1222  0057  0874               	movf	?___lwmod,w
  1223  0058  01A3               	clrf	___lwdiv@dividend
  1224  0059  07A3               	addwf	___lwdiv@dividend,f
  1225  005A  120A  118A  223F  120A  118A  	fcall	___lwdiv
  1226  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1227  0060  1303               	bcf	3,6	;RP1=0, select bank0
  1228  0061  0821               	movf	?___lwdiv,w
  1229  0062  00AC               	movwf	??_SEG7_write_all
  1230  0063  082C               	movf	??_SEG7_write_all,w
  1231  0064  00AF               	movwf	SEG7_write_all@digit2
  1232                           
  1233                           ;SEG7_4DIG.c: 14: uint8_t digit3 = (value % 100) / 10;
  1234  0065  300A               	movlw	10
  1235  0066  00A1               	movwf	___lwdiv@divisor
  1236  0067  3000               	movlw	0
  1237  0068  00A2               	movwf	___lwdiv@divisor+1
  1238  0069  082A               	movf	SEG7_write_all@value+1,w
  1239  006A  01F7               	clrf	___lwmod@dividend+1
  1240  006B  07F7               	addwf	___lwmod@dividend+1,f
  1241  006C  0829               	movf	SEG7_write_all@value,w
  1242  006D  01F6               	clrf	___lwmod@dividend
  1243  006E  07F6               	addwf	___lwmod@dividend,f
  1244  006F  3064               	movlw	100
  1245  0070  00F4               	movwf	___lwmod@divisor
  1246  0071  3000               	movlw	0
  1247  0072  00F5               	movwf	___lwmod@divisor+1
  1248  0073  120A  118A  22FA  120A  118A  	fcall	___lwmod
  1249  0078  0875               	movf	?___lwmod+1,w
  1250  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1251  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1252  007B  01A4               	clrf	___lwdiv@dividend+1
  1253  007C  07A4               	addwf	___lwdiv@dividend+1,f
  1254  007D  0874               	movf	?___lwmod,w
  1255  007E  01A3               	clrf	___lwdiv@dividend
  1256  007F  07A3               	addwf	___lwdiv@dividend,f
  1257  0080  120A  118A  223F  120A  118A  	fcall	___lwdiv
  1258  0085  1283               	bcf	3,5	;RP0=0, select bank0
  1259  0086  1303               	bcf	3,6	;RP1=0, select bank0
  1260  0087  0821               	movf	?___lwdiv,w
  1261  0088  00AC               	movwf	??_SEG7_write_all
  1262  0089  082C               	movf	??_SEG7_write_all,w
  1263  008A  00B0               	movwf	SEG7_write_all@digit3
  1264                           
  1265                           ;SEG7_4DIG.c: 15: uint8_t digit4 = value % 10;
  1266  008B  300A               	movlw	10
  1267  008C  00F4               	movwf	___lwmod@divisor
  1268  008D  3000               	movlw	0
  1269  008E  00F5               	movwf	___lwmod@divisor+1
  1270  008F  082A               	movf	SEG7_write_all@value+1,w
  1271  0090  01F7               	clrf	___lwmod@dividend+1
  1272  0091  07F7               	addwf	___lwmod@dividend+1,f
  1273  0092  0829               	movf	SEG7_write_all@value,w
  1274  0093  01F6               	clrf	___lwmod@dividend
  1275  0094  07F6               	addwf	___lwmod@dividend,f
  1276  0095  120A  118A  22FA  120A  118A  	fcall	___lwmod
  1277  009A  0874               	movf	?___lwmod,w
  1278  009B  1283               	bcf	3,5	;RP0=0, select bank0
  1279  009C  1303               	bcf	3,6	;RP1=0, select bank0
  1280  009D  00AC               	movwf	??_SEG7_write_all
  1281  009E  082C               	movf	??_SEG7_write_all,w
  1282  009F  00B1               	movwf	SEG7_write_all@digit4
  1283                           
  1284                           ;SEG7_4DIG.c: 17: bool dp1 = (decimal_point & 0x08) >> 3;
  1285  00A0  082B               	movf	SEG7_write_all@decimal_point,w
  1286  00A1  00AC               	movwf	??_SEG7_write_all
  1287  00A2  3003               	movlw	3
  1288  00A3                     u1335:	
  1289  00A3  1003               	clrc
  1290  00A4  0CAC               	rrf	??_SEG7_write_all,f
  1291  00A5  3EFF               	addlw	-1
  1292  00A6  1D03               	skipz
  1293  00A7  28A3               	goto	u1335
  1294  00A8  082C               	movf	??_SEG7_write_all,w
  1295  00A9  3901               	andlw	1
  1296  00AA  00AD               	movwf	??_SEG7_write_all+1
  1297  00AB  082D               	movf	??_SEG7_write_all+1,w
  1298  00AC  00B2               	movwf	SEG7_write_all@dp1
  1299                           
  1300                           ;SEG7_4DIG.c: 18: bool dp2 = (decimal_point & 0x04) >> 2;
  1301  00AD  082B               	movf	SEG7_write_all@decimal_point,w
  1302  00AE  00AC               	movwf	??_SEG7_write_all
  1303  00AF  3002               	movlw	2
  1304  00B0                     u1345:	
  1305  00B0  1003               	clrc
  1306  00B1  0CAC               	rrf	??_SEG7_write_all,f
  1307  00B2  3EFF               	addlw	-1
  1308  00B3  1D03               	skipz
  1309  00B4  28B0               	goto	u1345
  1310  00B5  082C               	movf	??_SEG7_write_all,w
  1311  00B6  3901               	andlw	1
  1312  00B7  00AD               	movwf	??_SEG7_write_all+1
  1313  00B8  082D               	movf	??_SEG7_write_all+1,w
  1314  00B9  00B3               	movwf	SEG7_write_all@dp2
  1315                           
  1316                           ;SEG7_4DIG.c: 19: bool dp3 = (decimal_point & 0x02) >> 1;
  1317  00BA  082B               	movf	SEG7_write_all@decimal_point,w
  1318  00BB  00AC               	movwf	??_SEG7_write_all
  1319  00BC  1003               	clrc
  1320  00BD  0C2C               	rrf	??_SEG7_write_all,w
  1321  00BE  3901               	andlw	1
  1322  00BF  00AD               	movwf	??_SEG7_write_all+1
  1323  00C0  082D               	movf	??_SEG7_write_all+1,w
  1324  00C1  00B4               	movwf	SEG7_write_all@dp3
  1325                           
  1326                           ;SEG7_4DIG.c: 20: bool dp4 = decimal_point & 0x01;
  1327  00C2  082B               	movf	SEG7_write_all@decimal_point,w
  1328  00C3  3901               	andlw	1
  1329  00C4  00AC               	movwf	??_SEG7_write_all
  1330  00C5  082C               	movf	??_SEG7_write_all,w
  1331  00C6  00B5               	movwf	SEG7_write_all@dp4
  1332                           
  1333                           ;SEG7_4DIG.c: 22: SEG7_write_digit(1, digit1, dp1);
  1334  00C7  082E               	movf	SEG7_write_all@digit1,w
  1335  00C8  00AC               	movwf	??_SEG7_write_all
  1336  00C9  082C               	movf	??_SEG7_write_all,w
  1337  00CA  00F4               	movwf	SEG7_write_digit@value
  1338  00CB  0832               	movf	SEG7_write_all@dp1,w
  1339  00CC  00AD               	movwf	??_SEG7_write_all+1
  1340  00CD  082D               	movf	??_SEG7_write_all+1,w
  1341  00CE  00F5               	movwf	SEG7_write_digit@decimal_point
  1342  00CF  3001               	movlw	1
  1343  00D0  120A  118A  2363  120A  118A  	fcall	_SEG7_write_digit
  1344                           
  1345                           ;SEG7_4DIG.c: 23: SEG7_write_digit(2, digit2, dp2);
  1346  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1347  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1348  00D7  082F               	movf	SEG7_write_all@digit2,w
  1349  00D8  00AC               	movwf	??_SEG7_write_all
  1350  00D9  082C               	movf	??_SEG7_write_all,w
  1351  00DA  00F4               	movwf	SEG7_write_digit@value
  1352  00DB  0833               	movf	SEG7_write_all@dp2,w
  1353  00DC  00AD               	movwf	??_SEG7_write_all+1
  1354  00DD  082D               	movf	??_SEG7_write_all+1,w
  1355  00DE  00F5               	movwf	SEG7_write_digit@decimal_point
  1356  00DF  3002               	movlw	2
  1357  00E0  120A  118A  2363  120A  118A  	fcall	_SEG7_write_digit
  1358                           
  1359                           ;SEG7_4DIG.c: 24: SEG7_write_digit(3, digit3, dp3);
  1360  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1361  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  1362  00E7  0830               	movf	SEG7_write_all@digit3,w
  1363  00E8  00AC               	movwf	??_SEG7_write_all
  1364  00E9  082C               	movf	??_SEG7_write_all,w
  1365  00EA  00F4               	movwf	SEG7_write_digit@value
  1366  00EB  0834               	movf	SEG7_write_all@dp3,w
  1367  00EC  00AD               	movwf	??_SEG7_write_all+1
  1368  00ED  082D               	movf	??_SEG7_write_all+1,w
  1369  00EE  00F5               	movwf	SEG7_write_digit@decimal_point
  1370  00EF  3003               	movlw	3
  1371  00F0  120A  118A  2363  120A  118A  	fcall	_SEG7_write_digit
  1372                           
  1373                           ;SEG7_4DIG.c: 25: SEG7_write_digit(4, digit4, dp4);
  1374  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  1375  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  1376  00F7  0831               	movf	SEG7_write_all@digit4,w
  1377  00F8  00AC               	movwf	??_SEG7_write_all
  1378  00F9  082C               	movf	??_SEG7_write_all,w
  1379  00FA  00F4               	movwf	SEG7_write_digit@value
  1380  00FB  0835               	movf	SEG7_write_all@dp4,w
  1381  00FC  00AD               	movwf	??_SEG7_write_all+1
  1382  00FD  082D               	movf	??_SEG7_write_all+1,w
  1383  00FE  00F5               	movwf	SEG7_write_digit@decimal_point
  1384  00FF  3004               	movlw	4
  1385  0100  120A  118A  2363   	fcall	_SEG7_write_digit
  1386  0103  0008               	return
  1387  0104                     __end_of_SEG7_write_all:	
  1388                           
  1389                           	psect	text4
  1390  02FA                     __ptext4:	
  1391 ;; *************** function ___lwmod *****************
  1392 ;; Defined at:
  1393 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;  divisor         2    4[COMMON] unsigned int 
  1396 ;;  dividend        2    6[COMMON] unsigned int 
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;  counter         1    0[BANK0 ] unsigned char 
  1399 ;; Return value:  Size  Location     Type
  1400 ;;                  2    4[COMMON] unsigned int 
  1401 ;; Registers used:
  1402 ;;		wreg, status,2, status,0
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1408 ;;      Params:         4       0       0       0       0
  1409 ;;      Locals:         0       1       0       0       0
  1410 ;;      Temps:          1       0       0       0       0
  1411 ;;      Totals:         5       1       0       0       0
  1412 ;;Total ram usage:        6 bytes
  1413 ;; Hardware stack levels used:    1
  1414 ;; Hardware stack levels required when called:    1
  1415 ;; This function calls:
  1416 ;;		Nothing
  1417 ;; This function is called by:
  1418 ;;		_SEG7_write_all
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           
  1423                           ;psect for function ___lwmod
  1424  02FA                     ___lwmod:	
  1425                           
  1426                           ;incstack = 0
  1427                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1428  02FA  0875               	movf	___lwmod@divisor+1,w
  1429  02FB  0474               	iorwf	___lwmod@divisor,w
  1430  02FC  1903               	skipnz
  1431  02FD  2B29               	goto	l1631
  1432  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  1433  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  1434  0300  01A0               	clrf	___lwmod@counter
  1435  0301  0AA0               	incf	___lwmod@counter,f
  1436  0302                     l1621:	
  1437  0302  1BF5               	btfsc	___lwmod@divisor+1,7
  1438  0303  2B10               	goto	l1623
  1439  0304  3001               	movlw	1
  1440  0305                     u1265:	
  1441  0305  1003               	clrc
  1442  0306  0DF4               	rlf	___lwmod@divisor,f
  1443  0307  0DF5               	rlf	___lwmod@divisor+1,f
  1444  0308  3EFF               	addlw	-1
  1445  0309  1D03               	skipz
  1446  030A  2B05               	goto	u1265
  1447  030B  3001               	movlw	1
  1448  030C  00F8               	movwf	??___lwmod
  1449  030D  0878               	movf	??___lwmod,w
  1450  030E  07A0               	addwf	___lwmod@counter,f
  1451  030F  2B02               	goto	l1621
  1452  0310                     l1623:	
  1453  0310  0875               	movf	___lwmod@divisor+1,w
  1454  0311  0277               	subwf	___lwmod@dividend+1,w
  1455  0312  1D03               	skipz
  1456  0313  2B16               	goto	u1285
  1457  0314  0874               	movf	___lwmod@divisor,w
  1458  0315  0276               	subwf	___lwmod@dividend,w
  1459  0316                     u1285:	
  1460  0316  1C03               	skipc
  1461  0317  2B1E               	goto	l1627
  1462  0318  0874               	movf	___lwmod@divisor,w
  1463  0319  02F6               	subwf	___lwmod@dividend,f
  1464  031A  0875               	movf	___lwmod@divisor+1,w
  1465  031B  1C03               	skipc
  1466  031C  03F7               	decf	___lwmod@dividend+1,f
  1467  031D  02F7               	subwf	___lwmod@dividend+1,f
  1468  031E                     l1627:	
  1469  031E  3001               	movlw	1
  1470  031F                     u1295:	
  1471  031F  1003               	clrc
  1472  0320  0CF5               	rrf	___lwmod@divisor+1,f
  1473  0321  0CF4               	rrf	___lwmod@divisor,f
  1474  0322  3EFF               	addlw	-1
  1475  0323  1D03               	skipz
  1476  0324  2B1F               	goto	u1295
  1477  0325  3001               	movlw	1
  1478  0326  02A0               	subwf	___lwmod@counter,f
  1479  0327  1D03               	btfss	3,2
  1480  0328  2B10               	goto	l1623
  1481  0329                     l1631:	
  1482  0329  0877               	movf	___lwmod@dividend+1,w
  1483  032A  01F5               	clrf	?___lwmod+1
  1484  032B  07F5               	addwf	?___lwmod+1,f
  1485  032C  0876               	movf	___lwmod@dividend,w
  1486  032D  01F4               	clrf	?___lwmod
  1487  032E  07F4               	addwf	?___lwmod,f
  1488  032F  0008               	return
  1489  0330                     __end_of___lwmod:	
  1490                           
  1491                           	psect	text5
  1492  023F                     __ptext5:	
  1493 ;; *************** function ___lwdiv *****************
  1494 ;; Defined at:
  1495 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;  divisor         2    1[BANK0 ] unsigned int 
  1498 ;;  dividend        2    3[BANK0 ] unsigned int 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;  quotient        2    6[BANK0 ] unsigned int 
  1501 ;;  counter         1    8[BANK0 ] unsigned char 
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  2    1[BANK0 ] unsigned int 
  1504 ;; Registers used:
  1505 ;;		wreg, status,2, status,0
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1511 ;;      Params:         0       4       0       0       0
  1512 ;;      Locals:         0       3       0       0       0
  1513 ;;      Temps:          0       1       0       0       0
  1514 ;;      Totals:         0       8       0       0       0
  1515 ;;Total ram usage:        8 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; Hardware stack levels required when called:    1
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_SEG7_write_all
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           
  1526                           ;psect for function ___lwdiv
  1527  023F                     ___lwdiv:	
  1528                           
  1529                           ;incstack = 0
  1530                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1531  023F  1283               	bcf	3,5	;RP0=0, select bank0
  1532  0240  1303               	bcf	3,6	;RP1=0, select bank0
  1533  0241  01A6               	clrf	___lwdiv@quotient
  1534  0242  01A7               	clrf	___lwdiv@quotient+1
  1535  0243  0822               	movf	___lwdiv@divisor+1,w
  1536  0244  0421               	iorwf	___lwdiv@divisor,w
  1537  0245  1903               	skipnz
  1538  0246  2A78               	goto	l1387
  1539  0247  01A8               	clrf	___lwdiv@counter
  1540  0248  0AA8               	incf	___lwdiv@counter,f
  1541  0249                     l1375:	
  1542  0249  1BA2               	btfsc	___lwdiv@divisor+1,7
  1543  024A  2A57               	goto	l1377
  1544  024B  3001               	movlw	1
  1545  024C                     u965:	
  1546  024C  1003               	clrc
  1547  024D  0DA1               	rlf	___lwdiv@divisor,f
  1548  024E  0DA2               	rlf	___lwdiv@divisor+1,f
  1549  024F  3EFF               	addlw	-1
  1550  0250  1D03               	skipz
  1551  0251  2A4C               	goto	u965
  1552  0252  3001               	movlw	1
  1553  0253  00A5               	movwf	??___lwdiv
  1554  0254  0825               	movf	??___lwdiv,w
  1555  0255  07A8               	addwf	___lwdiv@counter,f
  1556  0256  2A49               	goto	l1375
  1557  0257                     l1377:	
  1558  0257  3001               	movlw	1
  1559  0258                     u985:	
  1560  0258  1003               	clrc
  1561  0259  0DA6               	rlf	___lwdiv@quotient,f
  1562  025A  0DA7               	rlf	___lwdiv@quotient+1,f
  1563  025B  3EFF               	addlw	-1
  1564  025C  1D03               	skipz
  1565  025D  2A58               	goto	u985
  1566  025E  0822               	movf	___lwdiv@divisor+1,w
  1567  025F  0224               	subwf	___lwdiv@dividend+1,w
  1568  0260  1D03               	skipz
  1569  0261  2A64               	goto	u995
  1570  0262  0821               	movf	___lwdiv@divisor,w
  1571  0263  0223               	subwf	___lwdiv@dividend,w
  1572  0264                     u995:	
  1573  0264  1C03               	skipc
  1574  0265  2A6D               	goto	l1383
  1575  0266  0821               	movf	___lwdiv@divisor,w
  1576  0267  02A3               	subwf	___lwdiv@dividend,f
  1577  0268  0822               	movf	___lwdiv@divisor+1,w
  1578  0269  1C03               	skipc
  1579  026A  03A4               	decf	___lwdiv@dividend+1,f
  1580  026B  02A4               	subwf	___lwdiv@dividend+1,f
  1581  026C  1426               	bsf	___lwdiv@quotient,0
  1582  026D                     l1383:	
  1583  026D  3001               	movlw	1
  1584  026E                     u1005:	
  1585  026E  1003               	clrc
  1586  026F  0CA2               	rrf	___lwdiv@divisor+1,f
  1587  0270  0CA1               	rrf	___lwdiv@divisor,f
  1588  0271  3EFF               	addlw	-1
  1589  0272  1D03               	skipz
  1590  0273  2A6E               	goto	u1005
  1591  0274  3001               	movlw	1
  1592  0275  02A8               	subwf	___lwdiv@counter,f
  1593  0276  1D03               	btfss	3,2
  1594  0277  2A57               	goto	l1377
  1595  0278                     l1387:	
  1596  0278  0827               	movf	___lwdiv@quotient+1,w
  1597  0279  01A2               	clrf	?___lwdiv+1
  1598  027A  07A2               	addwf	?___lwdiv+1,f
  1599  027B  0826               	movf	___lwdiv@quotient,w
  1600  027C  01A1               	clrf	?___lwdiv
  1601  027D  07A1               	addwf	?___lwdiv,f
  1602  027E  0008               	return
  1603  027F                     __end_of___lwdiv:	
  1604                           
  1605                           	psect	text6
  1606  0363                     __ptext6:	
  1607 ;; *************** function _SEG7_write_digit *****************
  1608 ;; Defined at:
  1609 ;;		line 28 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\SEG7_4DIG.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  digit           1    wreg     unsigned char 
  1612 ;;  value           1    4[COMMON] unsigned char 
  1613 ;;  decimal_poin    1    5[COMMON] unsigned char 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  digit           1    7[COMMON] unsigned char 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;		None               void
  1618 ;; Registers used:
  1619 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1625 ;;      Params:         2       0       0       0       0
  1626 ;;      Locals:         1       0       0       0       0
  1627 ;;      Temps:          1       0       0       0       0
  1628 ;;      Totals:         4       0       0       0       0
  1629 ;;Total ram usage:        4 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_SEG7_write_all
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           
  1640                           ;psect for function _SEG7_write_digit
  1641  0363                     _SEG7_write_digit:	
  1642                           
  1643                           ;incstack = 0
  1644                           ; Regs used in _SEG7_write_digit: [wreg-fsr0h+status,2+status,0]
  1645                           ;SEG7_write_digit@digit stored from wreg
  1646  0363  00F7               	movwf	SEG7_write_digit@digit
  1647                           
  1648                           ;SEG7_4DIG.c: 29: RB4 = 1;
  1649  0364  1283               	bcf	3,5	;RP0=0, select bank0
  1650  0365  1303               	bcf	3,6	;RP1=0, select bank0
  1651  0366  1606               	bsf	6,4	;volatile
  1652                           
  1653                           ;SEG7_4DIG.c: 30: RB5 = 1;
  1654  0367  1686               	bsf	6,5	;volatile
  1655                           
  1656                           ;SEG7_4DIG.c: 31: RB6 = 1;
  1657  0368  1706               	bsf	6,6	;volatile
  1658                           
  1659                           ;SEG7_4DIG.c: 32: RB7 = 1;
  1660  0369  1786               	bsf	6,7	;volatile
  1661                           
  1662                           ;SEG7_4DIG.c: 34: switch(digit){
  1663  036A  2B73               	goto	l1273
  1664  036B                     l252:	
  1665                           ;SEG7_4DIG.c: 35: case 1:
  1666                           
  1667                           
  1668                           ;SEG7_4DIG.c: 36: RB4 = 0;
  1669  036B  1206               	bcf	6,4	;volatile
  1670                           
  1671                           ;SEG7_4DIG.c: 37: break;
  1672  036C  2B81               	goto	l1275
  1673  036D                     l254:	
  1674                           ;SEG7_4DIG.c: 38: case 2:
  1675                           
  1676                           
  1677                           ;SEG7_4DIG.c: 39: RB5 = 0;
  1678  036D  1286               	bcf	6,5	;volatile
  1679                           
  1680                           ;SEG7_4DIG.c: 40: break;
  1681  036E  2B81               	goto	l1275
  1682  036F                     l255:	
  1683                           ;SEG7_4DIG.c: 41: case 3:
  1684                           
  1685                           
  1686                           ;SEG7_4DIG.c: 42: RB6 = 0;
  1687  036F  1306               	bcf	6,6	;volatile
  1688                           
  1689                           ;SEG7_4DIG.c: 43: break;
  1690  0370  2B81               	goto	l1275
  1691  0371                     l256:	
  1692                           ;SEG7_4DIG.c: 44: case 4:
  1693                           
  1694                           
  1695                           ;SEG7_4DIG.c: 45: RB7 = 0;
  1696  0371  1386               	bcf	6,7	;volatile
  1697                           
  1698                           ;SEG7_4DIG.c: 47: }
  1699                           
  1700                           ;SEG7_4DIG.c: 46: break;
  1701  0372  2B81               	goto	l1275
  1702  0373                     l1273:	
  1703  0373  0877               	movf	SEG7_write_digit@digit,w
  1704                           
  1705                           ; Switch size 1, requested type "space"
  1706                           ; Number of cases is 4, Range of values is 1 to 4
  1707                           ; switch strategies available:
  1708                           ; Name         Instructions Cycles
  1709                           ; simple_byte           13     7 (average)
  1710                           ; direct_byte           23    11 (fixed)
  1711                           ; jumptable            263     9 (fixed)
  1712                           ;	Chosen strategy is simple_byte
  1713  0374  3A01               	xorlw	1	; case 1
  1714  0375  1903               	skipnz
  1715  0376  2B6B               	goto	l252
  1716  0377  3A03               	xorlw	3	; case 2
  1717  0378  1903               	skipnz
  1718  0379  2B6D               	goto	l254
  1719  037A  3A01               	xorlw	1	; case 3
  1720  037B  1903               	skipnz
  1721  037C  2B6F               	goto	l255
  1722  037D  3A07               	xorlw	7	; case 4
  1723  037E  1903               	skipnz
  1724  037F  2B71               	goto	l256
  1725  0380  2B81               	goto	l1275
  1726  0381                     l1275:	
  1727                           
  1728                           ;SEG7_4DIG.c: 49: PORTD = segNum[value];
  1729  0381  0874               	movf	SEG7_write_digit@value,w
  1730  0382  3E40               	addlw	_segNum& (0+255)
  1731  0383  0084               	movwf	4
  1732  0384  1383               	bcf	3,7	;select IRP bank0
  1733  0385  0800               	movf	0,w
  1734  0386  0088               	movwf	8	;volatile
  1735                           
  1736                           ;SEG7_4DIG.c: 50: if(decimal_point){
  1737  0387  0875               	movf	SEG7_write_digit@decimal_point,w
  1738  0388  1D03               	skipz
  1739                           
  1740                           ;SEG7_4DIG.c: 51: PORTD |= 0x80;
  1741  0389  1788               	bsf	8,7	;volatile
  1742                           
  1743                           ;SEG7_4DIG.c: 52: }
  1744                           ;SEG7_4DIG.c: 54: _delay((unsigned long)((1)*(4000000/4000.0)));
  1745  038A  30F9               	movlw	249
  1746  038B  00F6               	movwf	??_SEG7_write_digit
  1747  038C                     u1447:	
  1748  038C  0000               	nop
  1749  038D  0BF6               	decfsz	??_SEG7_write_digit,f
  1750  038E  2B8C               	goto	u1447
  1751  038F  2B90               	nop2	;nop
  1752  0390  0000               	nop
  1753  0391  0008               	return
  1754  0392                     __end_of_SEG7_write_digit:	
  1755                           
  1756                           	psect	text7
  1757  04EA                     __ptext7:	
  1758 ;; *************** function _RTC_get_year *****************
  1759 ;; Defined at:
  1760 ;;		line 115 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;		None
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;		None
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      unsigned char 
  1767 ;; Registers used:
  1768 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1774 ;;      Params:         0       0       0       0       0
  1775 ;;      Locals:         0       0       0       0       0
  1776 ;;      Temps:          0       0       0       0       0
  1777 ;;      Totals:         0       0       0       0       0
  1778 ;;Total ram usage:        0 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; Hardware stack levels required when called:    3
  1781 ;; This function calls:
  1782 ;;		_BCD_to_decimal
  1783 ;;		_RTC_read_register
  1784 ;; This function is called by:
  1785 ;;		_displayOnSegment
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           
  1790                           ;psect for function _RTC_get_year
  1791  04EA                     _RTC_get_year:	
  1792                           
  1793                           ;PIC_DS1302.c: 116: return BCD_to_decimal(RTC_read_register(0x8C));
  1794                           
  1795                           ;incstack = 0
  1796                           ; Regs used in _RTC_get_year: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1797  04EA  308C               	movlw	140
  1798  04EB  120A  118A  2455  120A  118A  	fcall	_RTC_read_register
  1799  04F0  120A  118A  240D   	fcall	_BCD_to_decimal
  1800  04F3  0008               	return
  1801  04F4                     __end_of_RTC_get_year:	
  1802                           
  1803                           	psect	text8
  1804  04F4                     __ptext8:	
  1805 ;; *************** function _RTC_get_month *****************
  1806 ;; Defined at:
  1807 ;;		line 107 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;		None
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;		None
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  1    wreg      unsigned char 
  1814 ;; Registers used:
  1815 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1821 ;;      Params:         0       0       0       0       0
  1822 ;;      Locals:         0       0       0       0       0
  1823 ;;      Temps:          0       0       0       0       0
  1824 ;;      Totals:         0       0       0       0       0
  1825 ;;Total ram usage:        0 bytes
  1826 ;; Hardware stack levels used:    1
  1827 ;; Hardware stack levels required when called:    3
  1828 ;; This function calls:
  1829 ;;		_BCD_to_decimal
  1830 ;;		_RTC_read_register
  1831 ;; This function is called by:
  1832 ;;		_displayOnSegment
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           
  1837                           ;psect for function _RTC_get_month
  1838  04F4                     _RTC_get_month:	
  1839                           
  1840                           ;PIC_DS1302.c: 108: return BCD_to_decimal(RTC_read_register(0x88));
  1841                           
  1842                           ;incstack = 0
  1843                           ; Regs used in _RTC_get_month: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1844  04F4  3088               	movlw	136
  1845  04F5  120A  118A  2455  120A  118A  	fcall	_RTC_read_register
  1846  04FA  120A  118A  240D   	fcall	_BCD_to_decimal
  1847  04FD  0008               	return
  1848  04FE                     __end_of_RTC_get_month:	
  1849                           
  1850                           	psect	text9
  1851  04FE                     __ptext9:	
  1852 ;; *************** function _RTC_get_minutes *****************
  1853 ;; Defined at:
  1854 ;;		line 81 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      unsigned char 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1868 ;;      Params:         0       0       0       0       0
  1869 ;;      Locals:         0       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0
  1871 ;;      Totals:         0       0       0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    3
  1875 ;; This function calls:
  1876 ;;		_BCD_to_decimal
  1877 ;;		_RTC_read_register
  1878 ;; This function is called by:
  1879 ;;		_displayOnSegment
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           
  1884                           ;psect for function _RTC_get_minutes
  1885  04FE                     _RTC_get_minutes:	
  1886                           
  1887                           ;PIC_DS1302.c: 82: return BCD_to_decimal(RTC_read_register(0x82));
  1888                           
  1889                           ;incstack = 0
  1890                           ; Regs used in _RTC_get_minutes: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1891  04FE  3082               	movlw	130
  1892  04FF  120A  118A  2455  120A  118A  	fcall	_RTC_read_register
  1893  0504  120A  118A  240D   	fcall	_BCD_to_decimal
  1894  0507  0008               	return
  1895  0508                     __end_of_RTC_get_minutes:	
  1896                           
  1897                           	psect	text10
  1898  0392                     __ptext10:	
  1899 ;; *************** function _RTC_get_hours *****************
  1900 ;; Defined at:
  1901 ;;		line 85 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;		None
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  hours           1    8[BANK0 ] unsigned char 
  1906 ;;  tmp             1    7[BANK0 ] unsigned char 
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      unsigned char 
  1909 ;; Registers used:
  1910 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1916 ;;      Params:         0       0       0       0       0
  1917 ;;      Locals:         0       2       0       0       0
  1918 ;;      Temps:          0       1       0       0       0
  1919 ;;      Totals:         0       3       0       0       0
  1920 ;;Total ram usage:        3 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    3
  1923 ;; This function calls:
  1924 ;;		_BCD_to_decimal
  1925 ;;		_RTC_read_register
  1926 ;; This function is called by:
  1927 ;;		_displayOnSegment
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           
  1932                           ;psect for function _RTC_get_hours
  1933  0392                     _RTC_get_hours:	
  1934                           
  1935                           ;PIC_DS1302.c: 86: unsigned char hours = RTC_read_register(0x84);
  1936                           
  1937                           ;incstack = 0
  1938                           ; Regs used in _RTC_get_hours: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1939  0392  3084               	movlw	132
  1940  0393  120A  118A  2455  120A  118A  	fcall	_RTC_read_register
  1941  0398  1283               	bcf	3,5	;RP0=0, select bank0
  1942  0399  1303               	bcf	3,6	;RP1=0, select bank0
  1943  039A  00A6               	movwf	??_RTC_get_hours
  1944  039B  0826               	movf	??_RTC_get_hours,w
  1945  039C  00A8               	movwf	RTC_get_hours@hours
  1946                           
  1947                           ;PIC_DS1302.c: 87: unsigned char tmp = 0;
  1948  039D  01A7               	clrf	RTC_get_hours@tmp
  1949                           
  1950                           ;PIC_DS1302.c: 89: if (hours & 0x80){
  1951  039E  1FA8               	btfss	RTC_get_hours@hours,7
  1952  039F  2BB1               	goto	l1651
  1953                           
  1954                           ;PIC_DS1302.c: 91: tmp = BCD_to_decimal(hours & 0x1F);
  1955  03A0  0828               	movf	RTC_get_hours@hours,w
  1956  03A1  391F               	andlw	31
  1957  03A2  120A  118A  240D  120A  118A  	fcall	_BCD_to_decimal
  1958  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  1959  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  1960  03A9  00A6               	movwf	??_RTC_get_hours
  1961  03AA  0826               	movf	??_RTC_get_hours,w
  1962  03AB  00A7               	movwf	RTC_get_hours@tmp
  1963                           
  1964                           ;PIC_DS1302.c: 93: if (hours & 0b00100000){
  1965  03AC  1EA8               	btfss	RTC_get_hours@hours,5
  1966  03AD  2BBB               	goto	l1653
  1967                           
  1968                           ;PIC_DS1302.c: 94: tmp = tmp + 12;
  1969  03AE  0827               	movf	RTC_get_hours@tmp,w
  1970  03AF  3E0C               	addlw	12
  1971  03B0  2BB8               	goto	L1
  1972  03B1                     l1651:	
  1973                           ;PIC_DS1302.c: 95: }
  1974                           ;PIC_DS1302.c: 96: } else {
  1975                           
  1976                           
  1977                           ;PIC_DS1302.c: 97: tmp = BCD_to_decimal(hours & 0x3F);
  1978  03B1  0828               	movf	RTC_get_hours@hours,w
  1979  03B2  393F               	andlw	63
  1980  03B3  120A  118A  240D   	fcall	_BCD_to_decimal
  1981  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  1982  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  1983  03B8                     L1:	
  1984  03B8  00A6               	movwf	??_RTC_get_hours
  1985  03B9  0826               	movf	??_RTC_get_hours,w
  1986  03BA  00A7               	movwf	RTC_get_hours@tmp
  1987  03BB                     l1653:	
  1988                           
  1989                           ;PIC_DS1302.c: 98: }
  1990                           ;PIC_DS1302.c: 100: return tmp;
  1991  03BB  0827               	movf	RTC_get_hours@tmp,w
  1992  03BC  0008               	return
  1993  03BD                     __end_of_RTC_get_hours:	
  1994                           
  1995                           	psect	text11
  1996  0508                     __ptext11:	
  1997 ;; *************** function _RTC_get_date *****************
  1998 ;; Defined at:
  1999 ;;		line 103 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;		None
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;		None
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      unsigned char 
  2006 ;; Registers used:
  2007 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2013 ;;      Params:         0       0       0       0       0
  2014 ;;      Locals:         0       0       0       0       0
  2015 ;;      Temps:          0       0       0       0       0
  2016 ;;      Totals:         0       0       0       0       0
  2017 ;;Total ram usage:        0 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    3
  2020 ;; This function calls:
  2021 ;;		_BCD_to_decimal
  2022 ;;		_RTC_read_register
  2023 ;; This function is called by:
  2024 ;;		_displayOnSegment
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           
  2029                           ;psect for function _RTC_get_date
  2030  0508                     _RTC_get_date:	
  2031                           
  2032                           ;PIC_DS1302.c: 104: return BCD_to_decimal(RTC_read_register(0x86));
  2033                           
  2034                           ;incstack = 0
  2035                           ; Regs used in _RTC_get_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2036  0508  3086               	movlw	134
  2037  0509  120A  118A  2455  120A  118A  	fcall	_RTC_read_register
  2038  050E  120A  118A  240D   	fcall	_BCD_to_decimal
  2039  0511  0008               	return
  2040  0512                     __end_of_RTC_get_date:	
  2041                           
  2042                           	psect	text12
  2043  0455                     __ptext12:	
  2044 ;; *************** function _RTC_read_register *****************
  2045 ;; Defined at:
  2046 ;;		line 19 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  address         1    wreg     unsigned char 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;  address         1    1[BANK0 ] unsigned char 
  2051 ;;  data            1    2[BANK0 ] unsigned char 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      unsigned char 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2061 ;;      Params:         0       0       0       0       0
  2062 ;;      Locals:         0       2       0       0       0
  2063 ;;      Temps:          0       1       0       0       0
  2064 ;;      Totals:         0       3       0       0       0
  2065 ;;Total ram usage:        3 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    2
  2068 ;; This function calls:
  2069 ;;		_RTC_read
  2070 ;;		_RTC_write
  2071 ;; This function is called by:
  2072 ;;		_RTC_get_minutes
  2073 ;;		_RTC_get_hours
  2074 ;;		_RTC_get_date
  2075 ;;		_RTC_get_month
  2076 ;;		_RTC_get_year
  2077 ;;		_RTC_get_seconds
  2078 ;;		_RTC_get_day
  2079 ;;		_RTC_set_hours
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           
  2084                           ;psect for function _RTC_read_register
  2085  0455                     _RTC_read_register:	
  2086                           
  2087                           ;incstack = 0
  2088                           ; Regs used in _RTC_read_register: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2089                           ;RTC_read_register@address stored from wreg
  2090  0455  1283               	bcf	3,5	;RP0=0, select bank0
  2091  0456  1303               	bcf	3,6	;RP1=0, select bank0
  2092  0457  00A1               	movwf	RTC_read_register@address
  2093                           
  2094                           ;PIC_DS1302.c: 20: RC0 = 1;
  2095  0458  1407               	bsf	7,0	;volatile
  2096                           
  2097                           ;PIC_DS1302.c: 21: _delay((unsigned long)((4)*(4000000/4000000.0)));
  2098  0459  2C5A               	nop2	;2 cycle nop
  2099  045A  2C5B               	nop2	;2 cycle nop
  2100                           
  2101                           ;PIC_DS1302.c: 23: RTC_write(address+1);
  2102  045B  1283               	bcf	3,5	;RP0=0, select bank0
  2103  045C  1303               	bcf	3,6	;RP1=0, select bank0
  2104  045D  0821               	movf	RTC_read_register@address,w
  2105  045E  3E01               	addlw	1
  2106  045F  120A  118A  2330  120A  118A  	fcall	_RTC_write
  2107                           
  2108                           ;PIC_DS1302.c: 24: unsigned char data = RTC_read();
  2109  0464  120A  118A  22BE   	fcall	_RTC_read
  2110  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2111  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2112  0469  00A0               	movwf	??_RTC_read_register
  2113  046A  0820               	movf	??_RTC_read_register,w
  2114  046B  00A2               	movwf	RTC_read_register@data
  2115                           
  2116                           ;PIC_DS1302.c: 26: RC0 = 0;
  2117  046C  1007               	bcf	7,0	;volatile
  2118                           
  2119                           ;PIC_DS1302.c: 28: return data;
  2120  046D  0822               	movf	RTC_read_register@data,w
  2121  046E  0008               	return
  2122  046F                     __end_of_RTC_read_register:	
  2123                           
  2124                           	psect	text13
  2125  02BE                     __ptext13:	
  2126 ;; *************** function _RTC_read *****************
  2127 ;; Defined at:
  2128 ;;		line 54 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;		None
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  i               2    6[COMMON] int 
  2133 ;;  data            1    8[COMMON] unsigned char 
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      unsigned char 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2, status,0, btemp+1
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2143 ;;      Params:         0       0       0       0       0
  2144 ;;      Locals:         3       0       0       0       0
  2145 ;;      Temps:          2       0       0       0       0
  2146 ;;      Totals:         5       0       0       0       0
  2147 ;;Total ram usage:        5 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    1
  2150 ;; This function calls:
  2151 ;;		Nothing
  2152 ;; This function is called by:
  2153 ;;		_RTC_read_register
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           
  2158                           ;psect for function _RTC_read
  2159  02BE                     _RTC_read:	
  2160                           
  2161                           ;PIC_DS1302.c: 55: unsigned char data = 0;
  2162                           
  2163                           ;incstack = 0
  2164                           ; Regs used in _RTC_read: [wreg+status,2+status,0+btemp+1]
  2165  02BE  01F8               	clrf	RTC_read@data
  2166                           
  2167                           ;PIC_DS1302.c: 57: TRISC2 = 1;
  2168  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  2169  02C0  1303               	bcf	3,6	;RP1=0, select bank1
  2170  02C1  1507               	bsf	7,2	;volatile
  2171                           
  2172                           ;PIC_DS1302.c: 59: for (int i = 0; i < 8; i++){
  2173  02C2  01F6               	clrf	RTC_read@i
  2174  02C3  01F7               	clrf	RTC_read@i+1
  2175  02C4  0877               	movf	RTC_read@i+1,w
  2176  02C5  3A80               	xorlw	128
  2177  02C6  00FF               	movwf	127
  2178  02C7  3080               	movlw	128
  2179  02C8  027F               	subwf	127,w
  2180  02C9  1D03               	skipz
  2181  02CA  2ACD               	goto	u695
  2182  02CB  3008               	movlw	8
  2183  02CC  0276               	subwf	RTC_read@i,w
  2184  02CD                     u695:	
  2185  02CD  1803               	btfsc	3,0
  2186  02CE  2AF8               	goto	l1223
  2187  02CF                     l100:	
  2188                           
  2189                           ;PIC_DS1302.c: 60: RC1 = 1;
  2190  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  2191  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  2192  02D1  1487               	bsf	7,1	;volatile
  2193                           
  2194                           ;PIC_DS1302.c: 61: _delay((unsigned long)((1)*(4000000/4000000.0)));
  2195  02D2  0000               	nop
  2196                           
  2197                           ;PIC_DS1302.c: 62: RC1 = 0;
  2198  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  2199  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  2200  02D5  1087               	bcf	7,1	;volatile
  2201                           
  2202                           ;PIC_DS1302.c: 63: _delay((unsigned long)((1)*(4000000/4000000.0)));
  2203  02D6  0000               	nop
  2204                           
  2205                           ;PIC_DS1302.c: 65: data = data >> 1;
  2206  02D7  0878               	movf	RTC_read@data,w
  2207  02D8  00F4               	movwf	??_RTC_read
  2208  02D9  1003               	clrc
  2209  02DA  0C74               	rrf	??_RTC_read,w
  2210  02DB  00F5               	movwf	??_RTC_read+1
  2211  02DC  0875               	movf	??_RTC_read+1,w
  2212  02DD  00F8               	movwf	RTC_read@data
  2213                           
  2214                           ;PIC_DS1302.c: 67: if (RC2){
  2215  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2216  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  2217  02E0  1D07               	btfss	7,2	;volatile
  2218  02E1  2AE7               	goto	l1219
  2219                           
  2220                           ;PIC_DS1302.c: 68: data = data | 0x80;
  2221  02E2  0878               	movf	RTC_read@data,w
  2222  02E3  3880               	iorlw	128
  2223  02E4  00F4               	movwf	??_RTC_read
  2224  02E5  0874               	movf	??_RTC_read,w
  2225  02E6  00F8               	movwf	RTC_read@data
  2226  02E7                     l1219:	
  2227  02E7  3001               	movlw	1
  2228  02E8  07F6               	addwf	RTC_read@i,f
  2229  02E9  1803               	skipnc
  2230  02EA  0AF7               	incf	RTC_read@i+1,f
  2231  02EB  3000               	movlw	0
  2232  02EC  07F7               	addwf	RTC_read@i+1,f
  2233  02ED  0877               	movf	RTC_read@i+1,w
  2234  02EE  3A80               	xorlw	128
  2235  02EF  00FF               	movwf	127
  2236  02F0  3080               	movlw	128
  2237  02F1  027F               	subwf	127,w
  2238  02F2  1D03               	skipz
  2239  02F3  2AF6               	goto	u715
  2240  02F4  3008               	movlw	8
  2241  02F5  0276               	subwf	RTC_read@i,w
  2242  02F6                     u715:	
  2243  02F6  1C03               	skipc
  2244  02F7  2ACF               	goto	l100
  2245  02F8                     l1223:	
  2246                           
  2247                           ;PIC_DS1302.c: 69: }
  2248                           ;PIC_DS1302.c: 70: }
  2249                           ;PIC_DS1302.c: 72: return data;
  2250  02F8  0878               	movf	RTC_read@data,w
  2251  02F9  0008               	return
  2252  02FA                     __end_of_RTC_read:	
  2253                           
  2254                           	psect	text14
  2255  040D                     __ptext14:	
  2256 ;; *************** function _BCD_to_decimal *****************
  2257 ;; Defined at:
  2258 ;;		line 165 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  bcd             1    wreg     unsigned char 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  bcd             1    5[BANK0 ] unsigned char 
  2263 ;;  decimal         1    4[BANK0 ] unsigned char 
  2264 ;;  ones            1    3[BANK0 ] unsigned char 
  2265 ;;  tens            1    2[BANK0 ] unsigned char 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      unsigned char 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2275 ;;      Params:         0       0       0       0       0
  2276 ;;      Locals:         0       4       0       0       0
  2277 ;;      Temps:          0       2       0       0       0
  2278 ;;      Totals:         0       6       0       0       0
  2279 ;;Total ram usage:        6 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    2
  2282 ;; This function calls:
  2283 ;;		___bmul
  2284 ;; This function is called by:
  2285 ;;		_RTC_get_minutes
  2286 ;;		_RTC_get_hours
  2287 ;;		_RTC_get_date
  2288 ;;		_RTC_get_month
  2289 ;;		_RTC_get_year
  2290 ;;		_RTC_get_seconds
  2291 ;;		_RTC_get_day
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           
  2296                           ;psect for function _BCD_to_decimal
  2297  040D                     _BCD_to_decimal:	
  2298                           
  2299                           ;incstack = 0
  2300                           ; Regs used in _BCD_to_decimal: [wreg+status,2+status,0+pclath+cstack]
  2301                           ;BCD_to_decimal@bcd stored from wreg
  2302  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2303  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2304  040F  00A5               	movwf	BCD_to_decimal@bcd
  2305                           
  2306                           ;PIC_DS1302.c: 166: unsigned char tens = (bcd >> 4) & 0x0F;
  2307  0410  0825               	movf	BCD_to_decimal@bcd,w
  2308  0411  00A0               	movwf	??_BCD_to_decimal
  2309  0412  3004               	movlw	4
  2310  0413                     u1245:	
  2311  0413  1003               	clrc
  2312  0414  0CA0               	rrf	??_BCD_to_decimal,f
  2313  0415  3EFF               	addlw	-1
  2314  0416  1D03               	skipz
  2315  0417  2C13               	goto	u1245
  2316  0418  0820               	movf	??_BCD_to_decimal,w
  2317  0419  390F               	andlw	15
  2318  041A  00A1               	movwf	??_BCD_to_decimal+1
  2319  041B  0821               	movf	??_BCD_to_decimal+1,w
  2320  041C  00A2               	movwf	BCD_to_decimal@tens
  2321                           
  2322                           ;PIC_DS1302.c: 167: unsigned char ones = bcd & 0x0F;
  2323  041D  0825               	movf	BCD_to_decimal@bcd,w
  2324  041E  390F               	andlw	15
  2325  041F  00A0               	movwf	??_BCD_to_decimal
  2326  0420  0820               	movf	??_BCD_to_decimal,w
  2327  0421  00A3               	movwf	BCD_to_decimal@ones
  2328                           
  2329                           ;PIC_DS1302.c: 168: unsigned char decimal = (tens * 10) + ones;
  2330  0422  300A               	movlw	10
  2331  0423  00A0               	movwf	??_BCD_to_decimal
  2332  0424  0820               	movf	??_BCD_to_decimal,w
  2333  0425  00F4               	movwf	___bmul@multiplicand
  2334  0426  0822               	movf	BCD_to_decimal@tens,w
  2335  0427  120A  118A  24C0   	fcall	___bmul
  2336  042A  1283               	bcf	3,5	;RP0=0, select bank0
  2337  042B  1303               	bcf	3,6	;RP1=0, select bank0
  2338  042C  0723               	addwf	BCD_to_decimal@ones,w
  2339  042D  00A1               	movwf	??_BCD_to_decimal+1
  2340  042E  0821               	movf	??_BCD_to_decimal+1,w
  2341  042F  00A4               	movwf	BCD_to_decimal@decimal
  2342                           
  2343                           ;PIC_DS1302.c: 170: return decimal;
  2344  0430  0824               	movf	BCD_to_decimal@decimal,w
  2345  0431  0008               	return
  2346  0432                     __end_of_BCD_to_decimal:	
  2347                           
  2348                           	psect	text15
  2349  04C0                     __ptext15:	
  2350 ;; *************** function ___bmul *****************
  2351 ;; Defined at:
  2352 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul8.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;  multiplier      1    wreg     unsigned char 
  2355 ;;  multiplicand    1    4[COMMON] unsigned char 
  2356 ;; Auto vars:     Size  Location     Type
  2357 ;;  multiplier      1    7[COMMON] unsigned char 
  2358 ;;  product         1    6[COMMON] unsigned char 
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      unsigned char 
  2361 ;; Registers used:
  2362 ;;		wreg, status,2, status,0
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2368 ;;      Params:         1       0       0       0       0
  2369 ;;      Locals:         2       0       0       0       0
  2370 ;;      Temps:          1       0       0       0       0
  2371 ;;      Totals:         4       0       0       0       0
  2372 ;;Total ram usage:        4 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    1
  2375 ;; This function calls:
  2376 ;;		Nothing
  2377 ;; This function is called by:
  2378 ;;		_BCD_to_decimal
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           
  2383                           ;psect for function ___bmul
  2384  04C0                     ___bmul:	
  2385                           
  2386                           ;incstack = 0
  2387                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2388                           ;___bmul@multiplier stored from wreg
  2389  04C0  00F7               	movwf	___bmul@multiplier
  2390  04C1  01F6               	clrf	___bmul@product
  2391  04C2                     l1229:	
  2392  04C2  1C77               	btfss	___bmul@multiplier,0
  2393  04C3  2CC8               	goto	l1233
  2394  04C4  0874               	movf	___bmul@multiplicand,w
  2395  04C5  00F5               	movwf	??___bmul
  2396  04C6  0875               	movf	??___bmul,w
  2397  04C7  07F6               	addwf	___bmul@product,f
  2398  04C8                     l1233:	
  2399  04C8  1003               	clrc
  2400  04C9  0DF4               	rlf	___bmul@multiplicand,f
  2401  04CA  1003               	clrc
  2402  04CB  0CF7               	rrf	___bmul@multiplier,f
  2403  04CC  08F7               	movf	___bmul@multiplier,f
  2404  04CD  1D03               	skipz
  2405  04CE  2CC2               	goto	l1229
  2406  04CF  0876               	movf	___bmul@product,w
  2407  04D0  0008               	return
  2408  04D1                     __end_of___bmul:	
  2409                           
  2410                           	psect	text16
  2411  0512                     __ptext16:	
  2412 ;; *************** function _SEG7_init *****************
  2413 ;; Defined at:
  2414 ;;		line 3 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\SEG7_4DIG.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;		None
  2419 ;; Return value:  Size  Location     Type
  2420 ;;		None               void
  2421 ;; Registers used:
  2422 ;;		status,2
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2428 ;;      Params:         0       0       0       0       0
  2429 ;;      Locals:         0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0
  2431 ;;      Totals:         0       0       0       0       0
  2432 ;;Total ram usage:        0 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    1
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_main
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _SEG7_init
  2444  0512                     _SEG7_init:	
  2445                           
  2446                           ;SEG7_4DIG.c: 4: TRISD = 0;
  2447                           
  2448                           ;incstack = 0
  2449                           ; Regs used in _SEG7_init: [status,2]
  2450  0512  1683               	bsf	3,5	;RP0=1, select bank1
  2451  0513  1303               	bcf	3,6	;RP1=0, select bank1
  2452  0514  0188               	clrf	8	;volatile
  2453                           
  2454                           ;SEG7_4DIG.c: 5: TRISB4 = 0;
  2455  0515  1206               	bcf	6,4	;volatile
  2456                           
  2457                           ;SEG7_4DIG.c: 6: TRISB5 = 0;
  2458  0516  1286               	bcf	6,5	;volatile
  2459                           
  2460                           ;SEG7_4DIG.c: 7: TRISB6 = 0;
  2461  0517  1306               	bcf	6,6	;volatile
  2462                           
  2463                           ;SEG7_4DIG.c: 8: TRISB7 = 0;
  2464  0518  1386               	bcf	6,7	;volatile
  2465  0519  0008               	return
  2466  051A                     __end_of_SEG7_init:	
  2467                           
  2468                           	psect	text17
  2469  049C                     __ptext17:	
  2470 ;; *************** function _RTC_set_year *****************
  2471 ;; Defined at:
  2472 ;;		line 160 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  year            1    wreg     unsigned char 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  year            1   14[BANK0 ] unsigned char 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;		None               void
  2479 ;; Registers used:
  2480 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2486 ;;      Params:         0       0       0       0       0
  2487 ;;      Locals:         0       1       0       0       0
  2488 ;;      Temps:          0       1       0       0       0
  2489 ;;      Totals:         0       2       0       0       0
  2490 ;;Total ram usage:        2 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    3
  2493 ;; This function calls:
  2494 ;;		_RTC_write_register
  2495 ;;		_decimal_to_BCD
  2496 ;; This function is called by:
  2497 ;;		_main
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           
  2502                           ;psect for function _RTC_set_year
  2503  049C                     _RTC_set_year:	
  2504                           
  2505                           ;incstack = 0
  2506                           ; Regs used in _RTC_set_year: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2507                           ;RTC_set_year@year stored from wreg
  2508  049C  1283               	bcf	3,5	;RP0=0, select bank0
  2509  049D  1303               	bcf	3,6	;RP1=0, select bank0
  2510  049E  00AE               	movwf	RTC_set_year@year
  2511                           
  2512                           ;PIC_DS1302.c: 161: RTC_write_register(0x8C, decimal_to_BCD(year));
  2513  049F  082E               	movf	RTC_set_year@year,w
  2514  04A0  120A  118A  227F  120A  118A  	fcall	_decimal_to_BCD
  2515  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  2516  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  2517  04A7  00AD               	movwf	??_RTC_set_year
  2518  04A8  082D               	movf	??_RTC_set_year,w
  2519  04A9  00AB               	movwf	RTC_write_register@data
  2520  04AA  308C               	movlw	140
  2521  04AB  120A  118A  246F   	fcall	_RTC_write_register
  2522  04AE  0008               	return
  2523  04AF                     __end_of_RTC_set_year:	
  2524                           
  2525                           	psect	text18
  2526  027F                     __ptext18:	
  2527 ;; *************** function _decimal_to_BCD *****************
  2528 ;; Defined at:
  2529 ;;		line 173 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;  decimal         1    wreg     unsigned char 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  decimal         1   10[BANK0 ] unsigned char 
  2534 ;;  bcd             1    9[BANK0 ] unsigned char 
  2535 ;;  ones            1    8[BANK0 ] unsigned char 
  2536 ;;  tens            1    7[BANK0 ] unsigned char 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      unsigned char 
  2539 ;; Registers used:
  2540 ;;		wreg, status,2, status,0, pclath, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2546 ;;      Params:         0       0       0       0       0
  2547 ;;      Locals:         0       4       0       0       0
  2548 ;;      Temps:          0       3       0       0       0
  2549 ;;      Totals:         0       7       0       0       0
  2550 ;;Total ram usage:        7 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    2
  2553 ;; This function calls:
  2554 ;;		___awdiv
  2555 ;;		___awmod
  2556 ;; This function is called by:
  2557 ;;		_RTC_set_year
  2558 ;;		_RTC_set_seconds
  2559 ;;		_RTC_set_minutes
  2560 ;;		_RTC_set_hours
  2561 ;;		_RTC_set_date
  2562 ;;		_RTC_set_month
  2563 ;;		_RTC_set_day
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           
  2568                           ;psect for function _decimal_to_BCD
  2569  027F                     _decimal_to_BCD:	
  2570                           
  2571                           ;incstack = 0
  2572                           ; Regs used in _decimal_to_BCD: [wreg+status,2+status,0+pclath+cstack]
  2573                           ;decimal_to_BCD@decimal stored from wreg
  2574  027F  1283               	bcf	3,5	;RP0=0, select bank0
  2575  0280  1303               	bcf	3,6	;RP1=0, select bank0
  2576  0281  00AA               	movwf	decimal_to_BCD@decimal
  2577                           
  2578                           ;PIC_DS1302.c: 174: unsigned char tens = decimal / 10;
  2579  0282  300A               	movlw	10
  2580  0283  00F4               	movwf	___awdiv@divisor
  2581  0284  3000               	movlw	0
  2582  0285  00F5               	movwf	___awdiv@divisor+1
  2583  0286  082A               	movf	decimal_to_BCD@decimal,w
  2584  0287  00A4               	movwf	??_decimal_to_BCD
  2585  0288  01A5               	clrf	??_decimal_to_BCD+1
  2586  0289  0824               	movf	??_decimal_to_BCD,w
  2587  028A  00F6               	movwf	___awdiv@dividend
  2588  028B  0825               	movf	??_decimal_to_BCD+1,w
  2589  028C  00F7               	movwf	___awdiv@dividend+1
  2590  028D  120A  118A  2193  120A  118A  	fcall	___awdiv
  2591  0292  0874               	movf	?___awdiv,w
  2592  0293  1283               	bcf	3,5	;RP0=0, select bank0
  2593  0294  1303               	bcf	3,6	;RP1=0, select bank0
  2594  0295  00A6               	movwf	??_decimal_to_BCD+2
  2595  0296  0826               	movf	??_decimal_to_BCD+2,w
  2596  0297  00A7               	movwf	decimal_to_BCD@tens
  2597                           
  2598                           ;PIC_DS1302.c: 175: unsigned char ones = decimal % 10;
  2599  0298  300A               	movlw	10
  2600  0299  00F4               	movwf	___awmod@divisor
  2601  029A  3000               	movlw	0
  2602  029B  00F5               	movwf	___awmod@divisor+1
  2603  029C  082A               	movf	decimal_to_BCD@decimal,w
  2604  029D  00A4               	movwf	??_decimal_to_BCD
  2605  029E  01A5               	clrf	??_decimal_to_BCD+1
  2606  029F  0824               	movf	??_decimal_to_BCD,w
  2607  02A0  00F6               	movwf	___awmod@dividend
  2608  02A1  0825               	movf	??_decimal_to_BCD+1,w
  2609  02A2  00F7               	movwf	___awmod@dividend+1
  2610  02A3  120A  118A  21F0  120A  118A  	fcall	___awmod
  2611  02A8  0874               	movf	?___awmod,w
  2612  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  2613  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  2614  02AB  00A6               	movwf	??_decimal_to_BCD+2
  2615  02AC  0826               	movf	??_decimal_to_BCD+2,w
  2616  02AD  00A8               	movwf	decimal_to_BCD@ones
  2617                           
  2618                           ;PIC_DS1302.c: 176: unsigned char bcd = (tens << 4) | ones;
  2619  02AE  0827               	movf	decimal_to_BCD@tens,w
  2620  02AF  00A4               	movwf	??_decimal_to_BCD
  2621  02B0  3003               	movlw	3
  2622  02B1                     u1135:	
  2623  02B1  1003               	clrc
  2624  02B2  0DA4               	rlf	??_decimal_to_BCD,f
  2625  02B3  3EFF               	addlw	-1
  2626  02B4  1D03               	skipz
  2627  02B5  2AB1               	goto	u1135
  2628  02B6  1003               	clrc
  2629  02B7  0D24               	rlf	??_decimal_to_BCD,w
  2630  02B8  0428               	iorwf	decimal_to_BCD@ones,w
  2631  02B9  00A5               	movwf	??_decimal_to_BCD+1
  2632  02BA  0825               	movf	??_decimal_to_BCD+1,w
  2633  02BB  00A9               	movwf	decimal_to_BCD@bcd
  2634                           
  2635                           ;PIC_DS1302.c: 178: return bcd;
  2636  02BC  0829               	movf	decimal_to_BCD@bcd,w
  2637  02BD  0008               	return
  2638  02BE                     __end_of_decimal_to_BCD:	
  2639                           
  2640                           	psect	text19
  2641  01F0                     __ptext19:	
  2642 ;; *************** function ___awmod *****************
  2643 ;; Defined at:
  2644 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  divisor         2    4[COMMON] int 
  2647 ;;  dividend        2    6[COMMON] int 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  sign            1    1[BANK0 ] unsigned char 
  2650 ;;  counter         1    0[BANK0 ] unsigned char 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  2    4[COMMON] int 
  2653 ;; Registers used:
  2654 ;;		wreg, status,2, status,0
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2660 ;;      Params:         4       0       0       0       0
  2661 ;;      Locals:         0       2       0       0       0
  2662 ;;      Temps:          1       0       0       0       0
  2663 ;;      Totals:         5       2       0       0       0
  2664 ;;Total ram usage:        7 bytes
  2665 ;; Hardware stack levels used:    1
  2666 ;; Hardware stack levels required when called:    1
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_decimal_to_BCD
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           
  2675                           ;psect for function ___awmod
  2676  01F0                     ___awmod:	
  2677                           
  2678                           ;incstack = 0
  2679                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2680  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  2681  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  2682  01F2  01A1               	clrf	___awmod@sign
  2683  01F3  1FF7               	btfss	___awmod@dividend+1,7
  2684  01F4  29FC               	goto	l1335
  2685  01F5  09F6               	comf	___awmod@dividend,f
  2686  01F6  09F7               	comf	___awmod@dividend+1,f
  2687  01F7  0AF6               	incf	___awmod@dividend,f
  2688  01F8  1903               	skipnz
  2689  01F9  0AF7               	incf	___awmod@dividend+1,f
  2690  01FA  01A1               	clrf	___awmod@sign
  2691  01FB  0AA1               	incf	___awmod@sign,f
  2692  01FC                     l1335:	
  2693  01FC  1FF5               	btfss	___awmod@divisor+1,7
  2694  01FD  2A03               	goto	l1339
  2695  01FE  09F4               	comf	___awmod@divisor,f
  2696  01FF  09F5               	comf	___awmod@divisor+1,f
  2697  0200  0AF4               	incf	___awmod@divisor,f
  2698  0201  1903               	skipnz
  2699  0202  0AF5               	incf	___awmod@divisor+1,f
  2700  0203                     l1339:	
  2701  0203  0875               	movf	___awmod@divisor+1,w
  2702  0204  0474               	iorwf	___awmod@divisor,w
  2703  0205  1903               	skipnz
  2704  0206  2A30               	goto	l1357
  2705  0207  01A0               	clrf	___awmod@counter
  2706  0208  0AA0               	incf	___awmod@counter,f
  2707  0209                     l1347:	
  2708  0209  1BF5               	btfsc	___awmod@divisor+1,7
  2709  020A  2A17               	goto	l1349
  2710  020B  3001               	movlw	1
  2711  020C                     u895:	
  2712  020C  1003               	clrc
  2713  020D  0DF4               	rlf	___awmod@divisor,f
  2714  020E  0DF5               	rlf	___awmod@divisor+1,f
  2715  020F  3EFF               	addlw	-1
  2716  0210  1D03               	skipz
  2717  0211  2A0C               	goto	u895
  2718  0212  3001               	movlw	1
  2719  0213  00F8               	movwf	??___awmod
  2720  0214  0878               	movf	??___awmod,w
  2721  0215  07A0               	addwf	___awmod@counter,f
  2722  0216  2A09               	goto	l1347
  2723  0217                     l1349:	
  2724  0217  0875               	movf	___awmod@divisor+1,w
  2725  0218  0277               	subwf	___awmod@dividend+1,w
  2726  0219  1D03               	skipz
  2727  021A  2A1D               	goto	u915
  2728  021B  0874               	movf	___awmod@divisor,w
  2729  021C  0276               	subwf	___awmod@dividend,w
  2730  021D                     u915:	
  2731  021D  1C03               	skipc
  2732  021E  2A25               	goto	l1353
  2733  021F  0874               	movf	___awmod@divisor,w
  2734  0220  02F6               	subwf	___awmod@dividend,f
  2735  0221  0875               	movf	___awmod@divisor+1,w
  2736  0222  1C03               	skipc
  2737  0223  03F7               	decf	___awmod@dividend+1,f
  2738  0224  02F7               	subwf	___awmod@dividend+1,f
  2739  0225                     l1353:	
  2740  0225  3001               	movlw	1
  2741  0226                     u925:	
  2742  0226  1003               	clrc
  2743  0227  0CF5               	rrf	___awmod@divisor+1,f
  2744  0228  0CF4               	rrf	___awmod@divisor,f
  2745  0229  3EFF               	addlw	-1
  2746  022A  1D03               	skipz
  2747  022B  2A26               	goto	u925
  2748  022C  3001               	movlw	1
  2749  022D  02A0               	subwf	___awmod@counter,f
  2750  022E  1D03               	btfss	3,2
  2751  022F  2A17               	goto	l1349
  2752  0230                     l1357:	
  2753  0230  0821               	movf	___awmod@sign,w
  2754  0231  1903               	btfsc	3,2
  2755  0232  2A38               	goto	l1361
  2756  0233  09F6               	comf	___awmod@dividend,f
  2757  0234  09F7               	comf	___awmod@dividend+1,f
  2758  0235  0AF6               	incf	___awmod@dividend,f
  2759  0236  1903               	skipnz
  2760  0237  0AF7               	incf	___awmod@dividend+1,f
  2761  0238                     l1361:	
  2762  0238  0877               	movf	___awmod@dividend+1,w
  2763  0239  01F5               	clrf	?___awmod+1
  2764  023A  07F5               	addwf	?___awmod+1,f
  2765  023B  0876               	movf	___awmod@dividend,w
  2766  023C  01F4               	clrf	?___awmod
  2767  023D  07F4               	addwf	?___awmod,f
  2768  023E  0008               	return
  2769  023F                     __end_of___awmod:	
  2770                           
  2771                           	psect	text20
  2772  0193                     __ptext20:	
  2773 ;; *************** function ___awdiv *****************
  2774 ;; Defined at:
  2775 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  divisor         2    4[COMMON] int 
  2778 ;;  dividend        2    6[COMMON] int 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  quotient        2    2[BANK0 ] int 
  2781 ;;  sign            1    1[BANK0 ] unsigned char 
  2782 ;;  counter         1    0[BANK0 ] unsigned char 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  2    4[COMMON] int 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2792 ;;      Params:         4       0       0       0       0
  2793 ;;      Locals:         0       4       0       0       0
  2794 ;;      Temps:          1       0       0       0       0
  2795 ;;      Totals:         5       4       0       0       0
  2796 ;;Total ram usage:        9 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    1
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_decimal_to_BCD
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           
  2807                           ;psect for function ___awdiv
  2808  0193                     ___awdiv:	
  2809                           
  2810                           ;incstack = 0
  2811                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2812  0193  1283               	bcf	3,5	;RP0=0, select bank0
  2813  0194  1303               	bcf	3,6	;RP1=0, select bank0
  2814  0195  01A1               	clrf	___awdiv@sign
  2815  0196  1FF5               	btfss	___awdiv@divisor+1,7
  2816  0197  299F               	goto	l1291
  2817  0198  09F4               	comf	___awdiv@divisor,f
  2818  0199  09F5               	comf	___awdiv@divisor+1,f
  2819  019A  0AF4               	incf	___awdiv@divisor,f
  2820  019B  1903               	skipnz
  2821  019C  0AF5               	incf	___awdiv@divisor+1,f
  2822  019D  01A1               	clrf	___awdiv@sign
  2823  019E  0AA1               	incf	___awdiv@sign,f
  2824  019F                     l1291:	
  2825  019F  1FF7               	btfss	___awdiv@dividend+1,7
  2826  01A0  29AA               	goto	l1297
  2827  01A1  09F6               	comf	___awdiv@dividend,f
  2828  01A2  09F7               	comf	___awdiv@dividend+1,f
  2829  01A3  0AF6               	incf	___awdiv@dividend,f
  2830  01A4  1903               	skipnz
  2831  01A5  0AF7               	incf	___awdiv@dividend+1,f
  2832  01A6  3001               	movlw	1
  2833  01A7  00F8               	movwf	??___awdiv
  2834  01A8  0878               	movf	??___awdiv,w
  2835  01A9  06A1               	xorwf	___awdiv@sign,f
  2836  01AA                     l1297:	
  2837  01AA  01A2               	clrf	___awdiv@quotient
  2838  01AB  01A3               	clrf	___awdiv@quotient+1
  2839  01AC  0875               	movf	___awdiv@divisor+1,w
  2840  01AD  0474               	iorwf	___awdiv@divisor,w
  2841  01AE  1903               	skipnz
  2842  01AF  29E1               	goto	l1319
  2843  01B0  01A0               	clrf	___awdiv@counter
  2844  01B1  0AA0               	incf	___awdiv@counter,f
  2845  01B2                     l1307:	
  2846  01B2  1BF5               	btfsc	___awdiv@divisor+1,7
  2847  01B3  29C0               	goto	l1309
  2848  01B4  3001               	movlw	1
  2849  01B5                     u795:	
  2850  01B5  1003               	clrc
  2851  01B6  0DF4               	rlf	___awdiv@divisor,f
  2852  01B7  0DF5               	rlf	___awdiv@divisor+1,f
  2853  01B8  3EFF               	addlw	-1
  2854  01B9  1D03               	skipz
  2855  01BA  29B5               	goto	u795
  2856  01BB  3001               	movlw	1
  2857  01BC  00F8               	movwf	??___awdiv
  2858  01BD  0878               	movf	??___awdiv,w
  2859  01BE  07A0               	addwf	___awdiv@counter,f
  2860  01BF  29B2               	goto	l1307
  2861  01C0                     l1309:	
  2862  01C0  3001               	movlw	1
  2863  01C1                     u815:	
  2864  01C1  1003               	clrc
  2865  01C2  0DA2               	rlf	___awdiv@quotient,f
  2866  01C3  0DA3               	rlf	___awdiv@quotient+1,f
  2867  01C4  3EFF               	addlw	-1
  2868  01C5  1D03               	skipz
  2869  01C6  29C1               	goto	u815
  2870  01C7  0875               	movf	___awdiv@divisor+1,w
  2871  01C8  0277               	subwf	___awdiv@dividend+1,w
  2872  01C9  1D03               	skipz
  2873  01CA  29CD               	goto	u825
  2874  01CB  0874               	movf	___awdiv@divisor,w
  2875  01CC  0276               	subwf	___awdiv@dividend,w
  2876  01CD                     u825:	
  2877  01CD  1C03               	skipc
  2878  01CE  29D6               	goto	l1315
  2879  01CF  0874               	movf	___awdiv@divisor,w
  2880  01D0  02F6               	subwf	___awdiv@dividend,f
  2881  01D1  0875               	movf	___awdiv@divisor+1,w
  2882  01D2  1C03               	skipc
  2883  01D3  03F7               	decf	___awdiv@dividend+1,f
  2884  01D4  02F7               	subwf	___awdiv@dividend+1,f
  2885  01D5  1422               	bsf	___awdiv@quotient,0
  2886  01D6                     l1315:	
  2887  01D6  3001               	movlw	1
  2888  01D7                     u835:	
  2889  01D7  1003               	clrc
  2890  01D8  0CF5               	rrf	___awdiv@divisor+1,f
  2891  01D9  0CF4               	rrf	___awdiv@divisor,f
  2892  01DA  3EFF               	addlw	-1
  2893  01DB  1D03               	skipz
  2894  01DC  29D7               	goto	u835
  2895  01DD  3001               	movlw	1
  2896  01DE  02A0               	subwf	___awdiv@counter,f
  2897  01DF  1D03               	btfss	3,2
  2898  01E0  29C0               	goto	l1309
  2899  01E1                     l1319:	
  2900  01E1  0821               	movf	___awdiv@sign,w
  2901  01E2  1903               	btfsc	3,2
  2902  01E3  29E9               	goto	l1323
  2903  01E4  09A2               	comf	___awdiv@quotient,f
  2904  01E5  09A3               	comf	___awdiv@quotient+1,f
  2905  01E6  0AA2               	incf	___awdiv@quotient,f
  2906  01E7  1903               	skipnz
  2907  01E8  0AA3               	incf	___awdiv@quotient+1,f
  2908  01E9                     l1323:	
  2909  01E9  0823               	movf	___awdiv@quotient+1,w
  2910  01EA  01F5               	clrf	?___awdiv+1
  2911  01EB  07F5               	addwf	?___awdiv+1,f
  2912  01EC  0822               	movf	___awdiv@quotient,w
  2913  01ED  01F4               	clrf	?___awdiv
  2914  01EE  07F4               	addwf	?___awdiv,f
  2915  01EF  0008               	return
  2916  01F0                     __end_of___awdiv:	
  2917                           
  2918                           	psect	text21
  2919  04D1                     __ptext21:	
  2920 ;; *************** function _RTC_init *****************
  2921 ;; Defined at:
  2922 ;;		line 3 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;		None
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;		None
  2927 ;; Return value:  Size  Location     Type
  2928 ;;		None               void
  2929 ;; Registers used:
  2930 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2936 ;;      Params:         0       0       0       0       0
  2937 ;;      Locals:         0       0       0       0       0
  2938 ;;      Temps:          0       0       0       0       0
  2939 ;;      Totals:         0       0       0       0       0
  2940 ;;Total ram usage:        0 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    4
  2943 ;; This function calls:
  2944 ;;		_RTC_write_protect
  2945 ;; This function is called by:
  2946 ;;		_main
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           
  2951                           ;psect for function _RTC_init
  2952  04D1                     _RTC_init:	
  2953                           
  2954                           ;PIC_DS1302.c: 4: TRISC1 = 0;
  2955                           
  2956                           ;incstack = 0
  2957                           ; Regs used in _RTC_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2958  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  2959  04D2  1303               	bcf	3,6	;RP1=0, select bank1
  2960  04D3  1087               	bcf	7,1	;volatile
  2961                           
  2962                           ;PIC_DS1302.c: 5: TRISC2 = 0;
  2963  04D4  1107               	bcf	7,2	;volatile
  2964                           
  2965                           ;PIC_DS1302.c: 6: TRISC0 = 0;
  2966  04D5  1007               	bcf	7,0	;volatile
  2967                           
  2968                           ;PIC_DS1302.c: 8: RC1 = 0;
  2969  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2970  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2971  04D8  1087               	bcf	7,1	;volatile
  2972                           
  2973                           ;PIC_DS1302.c: 9: RC2 = 0;
  2974  04D9  1107               	bcf	7,2	;volatile
  2975                           
  2976                           ;PIC_DS1302.c: 10: RC0 = 0;
  2977  04DA  1007               	bcf	7,0	;volatile
  2978                           
  2979                           ;PIC_DS1302.c: 12: RTC_write_protect(RTC_WRITE_PROTECT);
  2980  04DB  0879               	movf	_RTC_WRITE_PROTECT,w
  2981  04DC  120A  118A  2487   	fcall	_RTC_write_protect
  2982  04DF  0008               	return
  2983  04E0                     __end_of_RTC_init:	
  2984                           
  2985                           	psect	text22
  2986  0487                     __ptext22:	
  2987 ;; *************** function _RTC_write_protect *****************
  2988 ;; Defined at:
  2989 ;;		line 15 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  state           1    wreg     unsigned char 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  state           1   15[BANK0 ] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;		None               void
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3003 ;;      Params:         0       0       0       0       0
  3004 ;;      Locals:         0       1       0       0       0
  3005 ;;      Temps:          0       2       0       0       0
  3006 ;;      Totals:         0       3       0       0       0
  3007 ;;Total ram usage:        3 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    3
  3010 ;; This function calls:
  3011 ;;		_RTC_write_register
  3012 ;; This function is called by:
  3013 ;;		_RTC_init
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           
  3018                           ;psect for function _RTC_write_protect
  3019  0487                     _RTC_write_protect:	
  3020                           
  3021                           ;incstack = 0
  3022                           ; Regs used in _RTC_write_protect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3023                           ;RTC_write_protect@state stored from wreg
  3024  0487  1283               	bcf	3,5	;RP0=0, select bank0
  3025  0488  1303               	bcf	3,6	;RP1=0, select bank0
  3026  0489  00AF               	movwf	RTC_write_protect@state
  3027                           
  3028                           ;PIC_DS1302.c: 16: RTC_write_register(0x8C, state << 7);
  3029  048A  082F               	movf	RTC_write_protect@state,w
  3030  048B  00AD               	movwf	??_RTC_write_protect
  3031  048C  3006               	movlw	6
  3032  048D                     u1355:	
  3033  048D  1003               	clrc
  3034  048E  0DAD               	rlf	??_RTC_write_protect,f
  3035  048F  3EFF               	addlw	-1
  3036  0490  1D03               	skipz
  3037  0491  2C8D               	goto	u1355
  3038  0492  1003               	clrc
  3039  0493  0D2D               	rlf	??_RTC_write_protect,w
  3040  0494  00AE               	movwf	??_RTC_write_protect+1
  3041  0495  082E               	movf	??_RTC_write_protect+1,w
  3042  0496  00AB               	movwf	RTC_write_register@data
  3043  0497  308C               	movlw	140
  3044  0498  120A  118A  246F   	fcall	_RTC_write_register
  3045  049B  0008               	return
  3046  049C                     __end_of_RTC_write_protect:	
  3047                           
  3048                           	psect	text23
  3049  046F                     __ptext23:	
  3050 ;; *************** function _RTC_write_register *****************
  3051 ;; Defined at:
  3052 ;;		line 31 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  address         1    wreg     unsigned char 
  3055 ;;  data            1   11[BANK0 ] unsigned char 
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  address         1   12[BANK0 ] unsigned char 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;		None               void
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3067 ;;      Params:         0       1       0       0       0
  3068 ;;      Locals:         0       1       0       0       0
  3069 ;;      Temps:          0       0       0       0       0
  3070 ;;      Totals:         0       2       0       0       0
  3071 ;;Total ram usage:        2 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    2
  3074 ;; This function calls:
  3075 ;;		_RTC_write
  3076 ;; This function is called by:
  3077 ;;		_RTC_write_protect
  3078 ;;		_RTC_set_year
  3079 ;;		_RTC_set_seconds
  3080 ;;		_RTC_set_minutes
  3081 ;;		_RTC_set_hours
  3082 ;;		_RTC_set_date
  3083 ;;		_RTC_set_month
  3084 ;;		_RTC_set_day
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           
  3089                           ;psect for function _RTC_write_register
  3090  046F                     _RTC_write_register:	
  3091                           
  3092                           ;incstack = 0
  3093                           ; Regs used in _RTC_write_register: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3094                           ;RTC_write_register@address stored from wreg
  3095  046F  1283               	bcf	3,5	;RP0=0, select bank0
  3096  0470  1303               	bcf	3,6	;RP1=0, select bank0
  3097  0471  00AC               	movwf	RTC_write_register@address
  3098                           
  3099                           ;PIC_DS1302.c: 32: RC0 = 1;
  3100  0472  1407               	bsf	7,0	;volatile
  3101                           
  3102                           ;PIC_DS1302.c: 33: _delay((unsigned long)((4)*(4000000/4000000.0)));
  3103  0473  2C74               	nop2	;2 cycle nop
  3104  0474  2C75               	nop2	;2 cycle nop
  3105                           
  3106                           ;PIC_DS1302.c: 35: RTC_write(address);
  3107  0475  1283               	bcf	3,5	;RP0=0, select bank0
  3108  0476  1303               	bcf	3,6	;RP1=0, select bank0
  3109  0477  082C               	movf	RTC_write_register@address,w
  3110  0478  120A  118A  2330  120A  118A  	fcall	_RTC_write
  3111                           
  3112                           ;PIC_DS1302.c: 36: RTC_write(data);
  3113  047D  1283               	bcf	3,5	;RP0=0, select bank0
  3114  047E  1303               	bcf	3,6	;RP1=0, select bank0
  3115  047F  082B               	movf	RTC_write_register@data,w
  3116  0480  120A  118A  2330   	fcall	_RTC_write
  3117                           
  3118                           ;PIC_DS1302.c: 38: RC0 = 0;
  3119  0483  1283               	bcf	3,5	;RP0=0, select bank0
  3120  0484  1303               	bcf	3,6	;RP1=0, select bank0
  3121  0485  1007               	bcf	7,0	;volatile
  3122  0486  0008               	return
  3123  0487                     __end_of_RTC_write_register:	
  3124                           
  3125                           	psect	text24
  3126  0330                     __ptext24:	
  3127 ;; *************** function _RTC_write *****************
  3128 ;; Defined at:
  3129 ;;		line 41 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\PIC_DS1302.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;  data            1    wreg     unsigned char 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  data            1    5[COMMON] unsigned char 
  3134 ;;  i               2    6[COMMON] int 
  3135 ;; Return value:  Size  Location     Type
  3136 ;;		None               void
  3137 ;; Registers used:
  3138 ;;		wreg, status,2, status,0, btemp+1
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3144 ;;      Params:         0       0       0       0       0
  3145 ;;      Locals:         3       0       0       0       0
  3146 ;;      Temps:          1       0       0       0       0
  3147 ;;      Totals:         4       0       0       0       0
  3148 ;;Total ram usage:        4 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:    1
  3151 ;; This function calls:
  3152 ;;		Nothing
  3153 ;; This function is called by:
  3154 ;;		_RTC_read_register
  3155 ;;		_RTC_write_register
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           
  3160                           ;psect for function _RTC_write
  3161  0330                     _RTC_write:	
  3162                           
  3163                           ;incstack = 0
  3164                           ; Regs used in _RTC_write: [wreg+status,2+status,0+btemp+1]
  3165                           ;RTC_write@data stored from wreg
  3166  0330  00F5               	movwf	RTC_write@data
  3167                           
  3168                           ;PIC_DS1302.c: 42: TRISC2 = 0;
  3169  0331  1683               	bsf	3,5	;RP0=1, select bank1
  3170  0332  1303               	bcf	3,6	;RP1=0, select bank1
  3171  0333  1107               	bcf	7,2	;volatile
  3172                           
  3173                           ;PIC_DS1302.c: 44: for (int i = 0; i < 8; i++){
  3174  0334  01F6               	clrf	RTC_write@i
  3175  0335  01F7               	clrf	RTC_write@i+1
  3176  0336                     L2:	
  3177  0336  0877               	movf	RTC_write@i+1,w
  3178  0337  3A80               	xorlw	128
  3179  0338  00FF               	movwf	127
  3180  0339  3080               	movlw	128
  3181  033A  027F               	subwf	127,w
  3182  033B  1D03               	skipz
  3183  033C  2B3F               	goto	u645
  3184  033D  3008               	movlw	8
  3185  033E  0276               	subwf	RTC_write@i,w
  3186  033F                     u645:	
  3187  033F  1803               	btfsc	3,0
  3188  0340  0008               	return
  3189                           
  3190                           ;PIC_DS1302.c: 45: RC1 = 0;
  3191  0341  1283               	bcf	3,5	;RP0=0, select bank0
  3192  0342  1303               	bcf	3,6	;RP1=0, select bank0
  3193  0343  1087               	bcf	7,1	;volatile
  3194                           
  3195                           ;PIC_DS1302.c: 46: _delay((unsigned long)((1)*(4000000/4000000.0)));
  3196  0344  0000               	nop
  3197                           
  3198                           ;PIC_DS1302.c: 47: RC2 = (data >> i) & 0x01;
  3199  0345  0875               	movf	RTC_write@data,w
  3200  0346  00F4               	movwf	??_RTC_write
  3201  0347  0A76               	incf	RTC_write@i,w
  3202  0348  2B4B               	goto	u654
  3203  0349                     u655:	
  3204  0349  1003               	clrc
  3205  034A  0CF4               	rrf	??_RTC_write,f
  3206  034B                     u654:	
  3207  034B  3EFF               	addlw	-1
  3208  034C  1D03               	skipz
  3209  034D  2B49               	goto	u655
  3210  034E  1C74               	btfss	??_RTC_write,0
  3211  034F  2B54               	goto	u660
  3212  0350  1283               	bcf	3,5	;RP0=0, select bank0
  3213  0351  1303               	bcf	3,6	;RP1=0, select bank0
  3214  0352  1507               	bsf	7,2	;volatile
  3215  0353  2B57               	goto	l1195
  3216  0354                     u660:	
  3217  0354  1283               	bcf	3,5	;RP0=0, select bank0
  3218  0355  1303               	bcf	3,6	;RP1=0, select bank0
  3219  0356  1107               	bcf	7,2	;volatile
  3220  0357                     l1195:	
  3221                           
  3222                           ;PIC_DS1302.c: 48: _delay((unsigned long)((1)*(4000000/4000000.0)));
  3223  0357  0000               	nop
  3224                           
  3225                           ;PIC_DS1302.c: 49: RC1 = 1;
  3226  0358  1283               	bcf	3,5	;RP0=0, select bank0
  3227  0359  1303               	bcf	3,6	;RP1=0, select bank0
  3228  035A  1487               	bsf	7,1	;volatile
  3229                           
  3230                           ;PIC_DS1302.c: 50: _delay((unsigned long)((1)*(4000000/4000000.0)));
  3231  035B  0000               	nop
  3232  035C  3001               	movlw	1
  3233  035D  07F6               	addwf	RTC_write@i,f
  3234  035E  1803               	skipnc
  3235  035F  0AF7               	incf	RTC_write@i+1,f
  3236  0360  3000               	movlw	0
  3237  0361  07F7               	addwf	RTC_write@i+1,f
  3238  0362  2B36               	goto	L2
  3239  0363                     __end_of_RTC_write:	
  3240                           
  3241                           	psect	text25
  3242  03E6                     __ptext25:	
  3243 ;; *************** function _ISR *****************
  3244 ;; Defined at:
  3245 ;;		line 27 in file "C:\Users\Andre\Documents\Coding Main\PIC-Alarm-Clock\MPLAB Source\main.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;		None
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;		None
  3250 ;; Return value:  Size  Location     Type
  3251 ;;		None               void
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, btemp+1
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3259 ;;      Params:         0       0       0       0       0
  3260 ;;      Locals:         0       0       0       0       0
  3261 ;;      Temps:          4       0       0       0       0
  3262 ;;      Totals:         4       0       0       0       0
  3263 ;;Total ram usage:        4 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; This function calls:
  3266 ;;		Nothing
  3267 ;; This function is called by:
  3268 ;;		Interrupt level 1
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           
  3273                           ;psect for function _ISR
  3274  03E6                     _ISR:	
  3275                           
  3276                           ;main.c: 28: GIE = 0;
  3277  03E6  138B               	bcf	11,7	;volatile
  3278                           
  3279                           ;main.c: 30: if (INTF){
  3280  03E7  1C8B               	btfss	11,1	;volatile
  3281  03E8  2BFF               	goto	i1l1529
  3282                           
  3283                           ;main.c: 31: INTF = 0;
  3284  03E9  108B               	bcf	11,1	;volatile
  3285                           
  3286                           ;main.c: 33: phase++;
  3287  03EA  3001               	movlw	1
  3288  03EB  07CA               	addwf	_phase,f
  3289  03EC  1803               	skipnc
  3290  03ED  0ACB               	incf	_phase+1,f
  3291  03EE  3000               	movlw	0
  3292  03EF  07CB               	addwf	_phase+1,f
  3293                           
  3294                           ;main.c: 35: if (phase >= 3){
  3295  03F0  084B               	movf	_phase+1,w
  3296  03F1  3A80               	xorlw	128
  3297  03F2  00FF               	movwf	127
  3298  03F3  3080               	movlw	128
  3299  03F4  027F               	subwf	127,w
  3300  03F5  1D03               	skipz
  3301  03F6  2BF9               	goto	u121_25
  3302  03F7  3003               	movlw	3
  3303  03F8  024A               	subwf	_phase,w
  3304  03F9                     u121_25:	
  3305  03F9  1C03               	skipc
  3306  03FA  2BFF               	goto	i1l1529
  3307                           
  3308                           ;main.c: 36: phase = 0;
  3309  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  3310  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  3311  03FD  01CA               	clrf	_phase
  3312  03FE  01CB               	clrf	_phase+1
  3313  03FF                     i1l1529:	
  3314                           
  3315                           ;main.c: 37: }
  3316                           ;main.c: 39: }
  3317                           ;main.c: 41: GIE = 1;
  3318  03FF  178B               	bsf	11,7	;volatile
  3319  0400  0873               	movf	??_ISR+3,w
  3320  0401  1283               	bcf	3,5	;RP0=0, select bank0
  3321  0402  1303               	bcf	3,6	;RP1=0, select bank0
  3322  0403  00FF               	movwf	127
  3323  0404  0872               	movf	??_ISR+2,w
  3324  0405  008A               	movwf	10
  3325  0406  0871               	movf	??_ISR+1,w
  3326  0407  0084               	movwf	4
  3327  0408  0E70               	swapf	??_ISR^(0+-128),w
  3328  0409  0083               	movwf	3
  3329  040A  0EFE               	swapf	126,f
  3330  040B  0E7E               	swapf	126,w
  3331  040C  0009               	retfie
  3332  040D                     __end_of_ISR:	
  3333  007E                     btemp	set	126	;btemp
  3334  007E                     wtemp	set	126
  3335  007E                     wtemp0	set	126
  3336  0080                     wtemp1	set	128
  3337  0082                     wtemp2	set	130
  3338  0084                     wtemp3	set	132
  3339  0086                     wtemp4	set	134
  3340  0088                     wtemp5	set	136
  3341  007F                     wtemp6	set	127
  3342  007E                     ttemp	set	126
  3343  007E                     ttemp0	set	126
  3344  0081                     ttemp1	set	129
  3345  0084                     ttemp2	set	132
  3346  0087                     ttemp3	set	135
  3347  007F                     ttemp4	set	127
  3348  007E                     ltemp	set	126
  3349  007E                     ltemp0	set	126
  3350  0082                     ltemp1	set	130
  3351  0086                     ltemp2	set	134
  3352  0080                     ltemp3	set	128
  3353                           
  3354                           	psect	intentry
  3355  0004                     __pintentry:	
  3356                           ;incstack = 0
  3357                           ; Regs used in _ISR: [wreg+status,2+btemp+1]
  3358                           
  3359  0004                     interrupt_function:	
  3360  007E                     saved_w	set	btemp
  3361  0004  00FE               	movwf	btemp
  3362  0005  0E03               	swapf	3,w
  3363  0006  00F0               	movwf	??_ISR
  3364  0007  0804               	movf	4,w
  3365  0008  00F1               	movwf	??_ISR+1
  3366  0009  080A               	movf	10,w
  3367  000A  00F2               	movwf	??_ISR+2
  3368  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3369  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3370  000D  087F               	movf	btemp+1,w
  3371  000E  00F3               	movwf	??_ISR+3
  3372  000F  120A  118A  2BE6   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     32      44
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _SEG7_write_all->___lwmod
    ___lwdiv->___lwmod
    _RTC_read_register->_RTC_read
    _BCD_to_decimal->___bmul
    _decimal_to_BCD->___awdiv
    _decimal_to_BCD->___awmod

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_displayOnSegment
    _displayOnSegment->_SEG7_write_all
    _SEG7_write_all->___lwdiv
    ___lwdiv->___lwmod
    _RTC_get_year->_BCD_to_decimal
    _RTC_get_month->_BCD_to_decimal
    _RTC_get_minutes->_BCD_to_decimal
    _RTC_get_hours->_BCD_to_decimal
    _RTC_get_date->_BCD_to_decimal
    _RTC_set_year->_RTC_write_register
    _decimal_to_BCD->___awdiv
    _RTC_init->_RTC_write_protect
    _RTC_write_protect->_RTC_write_register
    _RTC_write_register->_decimal_to_BCD

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8618
                           _RTC_init
                       _RTC_set_year
                          _SEG7_init
                   _displayOnSegment
 ---------------------------------------------------------------------------------
 (1) _displayOnSegment                                    10     8      2    6291
                                             22 BANK0     10     8      2
                       _RTC_get_date
                      _RTC_get_hours
                    _RTC_get_minutes
                      _RTC_get_month
                       _RTC_get_year
                     _SEG7_write_all
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SEG7_write_all                                      13    10      3    2502
                                              9 BANK0     13    10      3
                   _SEG7_write_digit
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     622
                                              4 COMMON     5     1      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     480
                                              1 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _SEG7_write_digit                                     4     2      2     490
                                              4 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _RTC_get_year                                         0     0      0     579
                     _BCD_to_decimal
                  _RTC_read_register
 ---------------------------------------------------------------------------------
 (2) _RTC_get_month                                        0     0      0     579
                     _BCD_to_decimal
                  _RTC_read_register
 ---------------------------------------------------------------------------------
 (2) _RTC_get_minutes                                      0     0      0     579
                     _BCD_to_decimal
                  _RTC_read_register
 ---------------------------------------------------------------------------------
 (2) _RTC_get_hours                                        3     3      0     780
                                              6 BANK0      3     3      0
                     _BCD_to_decimal
                  _RTC_read_register
 ---------------------------------------------------------------------------------
 (2) _RTC_get_date                                         0     0      0     579
                     _BCD_to_decimal
                  _RTC_read_register
 ---------------------------------------------------------------------------------
 (3) _RTC_read_register                                    3     3      0     270
                                              0 BANK0      3     3      0
                           _RTC_read
                          _RTC_write
 ---------------------------------------------------------------------------------
 (4) _RTC_read                                             5     5      0     115
                                              4 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _BCD_to_decimal                                       6     6      0     309
                                              0 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     145
                                              4 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _SEG7_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_set_year                                         2     2      0    1624
                                             13 BANK0      2     2      0
                 _RTC_write_register
                     _decimal_to_BCD
 ---------------------------------------------------------------------------------
 (2) _decimal_to_BCD                                       7     7      0     921
                                              4 BANK0      7     7      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     402
                                              4 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     406
                                              4 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _RTC_init                                             0     0      0     703
                  _RTC_write_protect
 ---------------------------------------------------------------------------------
 (2) _RTC_write_protect                                    3     3      0     703
                                             13 BANK0      3     3      0
                 _RTC_write_register
 ---------------------------------------------------------------------------------
 (2) _RTC_write_register                                   2     1      1     672
                                             11 BANK0      2     1      1
                          _RTC_write
                     _decimal_to_BCD (ARG)
 ---------------------------------------------------------------------------------
 (4) _RTC_write                                            4     4      0      90
                                              4 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTC_init
     _RTC_write_protect
       _RTC_write_register
         _RTC_write
         _decimal_to_BCD (ARG)
           ___awdiv
           ___awmod
   _RTC_set_year
     _RTC_write_register
       _RTC_write
       _decimal_to_BCD (ARG)
         ___awdiv
         ___awmod
     _decimal_to_BCD
       ___awdiv
       ___awmod
   _SEG7_init
   _displayOnSegment
     _RTC_get_date
       _BCD_to_decimal
         ___bmul
       _RTC_read_register
         _RTC_read
         _RTC_write
     _RTC_get_hours
       _BCD_to_decimal
         ___bmul
       _RTC_read_register
         _RTC_read
         _RTC_write
     _RTC_get_minutes
       _BCD_to_decimal
         ___bmul
       _RTC_read_register
         _RTC_read
         _RTC_write
     _RTC_get_month
       _BCD_to_decimal
         ___bmul
       _RTC_read_register
         _RTC_read
         _RTC_write
     _RTC_get_year
       _BCD_to_decimal
         ___bmul
       _RTC_read_register
         _RTC_read
         _RTC_write
     _SEG7_write_all
       _SEG7_write_digit
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
       ___wmul (ARG)
     ___wmul

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     20      2C       5       55.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      36      12        0.0%
ABS                  0      0      36       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Jun 15 14:45:53 2024

             _SEG7_write_digit 0363             BCD_to_decimal@ones 0023       __end_of_displayOnSegment 0193  
           BCD_to_decimal@tens 0022                              pc 0002          BCD_to_decimal@decimal 0024  
               ___bmul@product 0076                    __CFG_CP$OFF 0000                   ___awdiv@sign 0021  
                           fsr 0004            ___wmul@multiplicand 0076                 _decimal_to_BCD 027F  
        __size_of_RTC_set_year 0013                            l100 02CF                            l252 036B  
                          l254 036D                            l342 03CB                            l255 036F  
                          l256 0371                            _GIE 005F                            _RC0 0038  
                          _RC1 0039                            _RC2 003A                            _RB4 0034  
                          _RB5 0035                            _RB6 0036                            _RB7 0037  
                 __CFG_CPD$OFF 0000                            _ISR 03E6                            u715 02F6  
                          u660 0354                            u645 033F                            u654 034B  
                          u655 0349                            u815 01C1                            u825 01CD  
                          u835 01D7                            u915 021D                            u925 0226  
                          u695 02CD                            _RX9 00C6                            u795 01B5  
                          u965 024C                            u895 020C                            u985 0258  
                          _TX9 04C6                            u995 0264                            fsr0 0004  
                          indf 0000                   ___awmod@sign 0021                   __CFG_FOSC$XT 0000  
                 _RTC_get_date 0508         __end_of_BCD_to_decimal 0432                   __CFG_LVP$OFF 0000  
                         ?_ISR 0070                   _RTC_get_year 04EA                           l1223 02F8  
                         l1233 04C8                           l1323 01E9                           l1315 01D6  
                         l1307 01B2                           l1219 02E7                           l1309 01C0  
                         l1229 04C2                           l1319 01E1                           l1335 01FC  
                         l1361 0238                           l1353 0225                           l1273 0373  
                         l1195 0357                           l1291 019F                           l1347 0209  
                         l1339 0203                           l1275 0381                           l1349 0217  
                         l1357 0230                           l1621 0302                           l1383 026D  
                         l1375 0249                           l1623 0310                           l1631 0329  
                         l1297 01AA                           l1377 0257                           l1713 0140  
                         l1651 03B1                           l1387 0278                           l1627 031E  
                         l1653 03BB                           l1719 017D                           l1735 0447  
                         l1691 03C1                           _BRGH 04C2                           _CREN 00C4  
                         u1005 026E                           u1135 02B1                           u1245 0413  
                         u1335 00A3                           u1265 0305                           u1345 00B0  
                         u1355 048D                           u1285 0316                           u1447 038C  
                         u1295 031F                           u1375 03CC                           u1385 03D3  
                         _INTE 005C                           _INTF 0059                           _RCIF 0065  
                         _SPEN 00C7                           _TRMT 04C1                           _TXEN 04C5  
                         _SYNC 04C4                   __CFG_WRT$OFF 0000                           _main 0432  
                         btemp 007E                  __CFG_BOREN$ON 0000                           ltemp 007E  
                         start 0012                           ttemp 007E                           wtemp 007E  
                 _RTC_set_year 049C              ___bmul@multiplier 0077         __end_of_decimal_to_BCD 02BE  
                        ??_ISR 0070              ??_RTC_get_minutes 0079             __size_of_SEG7_init 0008  
                _RTC_get_hours 0392                  _RTC_get_month 04F4                          ?_main 0070  
              __end_of___awdiv 01F0                  __CFG_WDTE$OFF 0000                __end_of___awmod 023F  
              ___awdiv@divisor 0074                __end_of___lwdiv 027F                __end_of___lwmod 0330  
              ___awdiv@counter 0020                          _RCREG 001A                          _SPBRG 0099  
                        _PORTD 0008                          _TRISD 0088                          _TXREG 0019  
                __CFG_PWRTE$ON 0000             decimal_to_BCD@ones 0028             decimal_to_BCD@tens 0027  
              ?_BCD_to_decimal 0070                          _phase 004A                          pclath 000A  
             __end_of_RTC_init 04E0               __end_of_RTC_read 02FA                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F               ??_SEG7_write_all 002C             __size_of_RTC_write 0033  
              __initialization 0015                   __end_of_main 0455                ?_decimal_to_BCD 0070  
               ?_RTC_get_hours 0070                 ?_RTC_get_month 0070     __end_of_RTC_write_register 0487  
                       ??_main 0079               ___awdiv@dividend 0076              __end_of_SEG7_init 051A  
                       i1l1529 03FF                         u121_25 03F9                         _TRISB0 0430  
                       _TRISC0 0438                         _TRISC1 0439                         _TRISC2 043A  
                       _TRISB4 0434                         _TRISB5 0435                         _TRISB6 0436  
                       _TRISB7 0437           displayOnSegment@year 003F                         ___bmul 04C0  
                       ___wmul 03BD                      ??___awdiv 0078                      ??___awmod 0078  
                    ??___lwdiv 0025                      ??___lwmod 0078                         _segNum 0040  
             ___awdiv@quotient 0022                ___awmod@divisor 0074                ___awmod@counter 0020  
                 RTC_read@data 0078                         saved_w 007E              __end_of_RTC_write 0363  
     __end_of_SEG7_write_digit 0392        __end_of__initialization 0024               RTC_set_year@year 002E  
          ___bmul@multiplicand 0074                ??_RTC_get_hours 0026                ??_RTC_get_month 0079  
               __pcstackCOMMON 0070                   __pidataBANK0 04E0              ?_displayOnSegment 0036  
           ??_displayOnSegment 0038                      ?_RTC_init 0070                      ?_RTC_read 0070  
     RTC_read_register@address 0021          SEG7_write_digit@digit 0077            SEG7_write_all@value 0029  
                   __pbssBANK0 004A          SEG7_write_digit@value 0074                _RTC_get_minutes 04FE  
            SEG7_write_all@dp1 0032              SEG7_write_all@dp2 0033              SEG7_write_all@dp3 0034  
            SEG7_write_all@dp4 0035                     __pmaintext 0432                        ?___bmul 0074  
                      ?___wmul 0074                     __pintentry 0004                     ??_RTC_init 0079  
                   ??_RTC_read 0074               ??_BCD_to_decimal 0020          displayOnSegment@phase 0036  
        displayOnSegment@hours 003C          displayOnSegment@month 003D               ??_decimal_to_BCD 0024  
                    RTC_read@i 0076                __size_of___bmul 0011                        ___awdiv 0193  
                      ___awmod 01F0                __size_of___wmul 0029                        ___lwdiv 023F  
                      ___lwmod 02FA    SEG7_write_all@decimal_point 002B                        __ptext1 0104  
                      __ptext2 03BD                        __ptext3 0028                        __ptext4 02FA  
                      __ptext5 023F                        __ptext6 0363                        __ptext7 04EA  
                      __ptext8 04F4                        __ptext9 04FE               RTC_get_hours@tmp 0027  
                 __size_of_ISR 0027               ___awmod@dividend 0076        __end_of_RTC_get_minutes 0508  
         end_of_initialization 0024             _RTC_write_register 046F                      _SEG7_init 0512  
          ?_RTC_write_register 002B              _RTC_WRITE_PROTECT 0079           ??_RTC_write_register 0079  
      displayOnSegment@minutes 003B              ?_SEG7_write_digit 0074                      _RTC_write 0330  
           ??_SEG7_write_digit 0076         RTC_write_register@data 002B                     ?_SEG7_init 0070  
               __end_of___bmul 04D1                 __end_of___wmul 03E6              decimal_to_BCD@bcd 0029  
      __size_of_SEG7_write_all 00DC              __size_of_RTC_init 000F              __size_of_RTC_read 003C  
          start_initialization 0015                    __end_of_ISR 040D                  ?_RTC_get_date 0070  
             ?_RTC_get_minutes 0070      __size_of_displayOnSegment 008F                  ?_RTC_get_year 0070  
                   ?_RTC_write 0070            displayOnSegment@day 003E                  ?_RTC_set_year 0070  
                RTC_write@data 0075                       ??___bmul 0075                       ??___wmul 0078  
                   init_fetch0 04AF          __end_of_RTC_get_hours 03BD          __end_of_RTC_get_month 04FE  
         SEG7_write_all@digit1 002E           SEG7_write_all@digit2 002F           SEG7_write_all@digit3 0030  
         SEG7_write_all@digit4 0031                    __pdataBANK0 0040                    __pbssCOMMON 0079  
                    ___latbits 0002                  __pcstackBANK0 0020                 ??_RTC_get_date 0079  
               ??_RTC_get_year 0079                    ??_SEG7_init 0074                 ??_RTC_set_year 002D  
             ___lwdiv@dividend 0023                       ?___awdiv 0074                       ?___awmod 0074  
                     ?___lwdiv 0021              _RTC_read_register 0455                       ?___lwmod 0074  
           ?_RTC_read_register 0070             RTC_get_hours@hours 0028            ??_RTC_read_register 0020  
             ___lwdiv@quotient 0026                    ??_RTC_write 0074              interrupt_function 0004  
               ___wmul@product 0020              _RTC_write_protect 0487      __end_of_RTC_read_register 046F  
           ?_RTC_write_protect 0070                 _SEG7_write_all 0028      RTC_write_register@address 002C  
                     _RTC_init 04D1                       _RTC_read 02BE            ??_RTC_write_protect 002D  
            ___wmul@multiplier 0074               _displayOnSegment 0104          decimal_to_BCD@decimal 002A  
      __size_of_BCD_to_decimal 0025          RTC_read_register@data 0022      __end_of_RTC_write_protect 049C  
         __end_of_RTC_get_date 0512      __size_of_SEG7_write_digit 002F           __end_of_RTC_get_year 04F4  
       __end_of_SEG7_write_all 0104               __size_of___awdiv 005D               __size_of___awmod 004F  
             __size_of___lwdiv 0040               __size_of___lwmod 0036        __size_of_decimal_to_BCD 003F  
                   RTC_write@i 0076    __size_of_RTC_write_register 0018           __end_of_RTC_set_year 04AF  
              ___lwdiv@divisor 0021                ___lwdiv@counter 0028                       __ptext10 0392  
                     __ptext11 0508                       __ptext20 0193                       __ptext12 0455  
                     __ptext21 04D1                       __ptext13 02BE                       __ptext22 0487  
                     __ptext14 040D                       __ptext23 046F                       __ptext15 04C0  
                     __ptext24 0330                       __ptext16 0512                       __ptext25 03E6  
                     __ptext17 049C                       __ptext18 027F                       __ptext19 01F0  
                __size_of_main 0023  SEG7_write_digit@decimal_point 0075     __size_of_RTC_read_register 001A  
              ?_SEG7_write_all 0029                       init_ram0 04B3                       intlevel1 0000  
             ___lwmod@dividend 0076     __size_of_RTC_write_protect 0015       __size_of_RTC_get_minutes 000A  
              ___lwmod@divisor 0074                ___lwmod@counter 0020         RTC_write_protect@state 002F  
               _BCD_to_decimal 040D         __size_of_RTC_get_hours 002B         __size_of_RTC_get_month 000A  
        __size_of_RTC_get_date 000A          __size_of_RTC_get_year 000A              BCD_to_decimal@bcd 0025  
